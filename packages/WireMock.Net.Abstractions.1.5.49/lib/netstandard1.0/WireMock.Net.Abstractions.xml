<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WireMock.Net.Abstractions</name>
    </assembly>
    <members>
        <member name="T:WireMock.Admin.Mappings.BodyModel">
            <summary>
            Body Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.Matcher">
            <summary>
            Gets or sets the matcher.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.ClientIPModel">
            <summary>
            ClientIPModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ClientIPModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ClientIPModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.CookieModel">
            <summary>
            Cookie Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.IgnoreCase">
            <summary>
            Gets or sets the ignore case for the Cookie Name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.RejectOnMatch">
            <summary>
            Gets or sets the Reject on match for the Cookie Name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.EncodingModel">
            <summary>
            EncodingModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.CodePage">
            <summary>
            Encoding CodePage
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.EncodingName">
            <summary>
            Encoding EncodingName
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.WebName">
            <summary>
            Encoding WebName
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.FaultModel">
            <summary>
            Fault Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.FaultModel.Type">
            <summary>
            Gets or sets the fault. Can be null, "", NONE, EMPTY_RESPONSE or MALFORMED_RESPONSE_CHUNK.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.FaultModel.Percentage">
            <summary>
            Gets or sets the fault percentage.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.HeaderModel">
            <summary>
            Header Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.Name">
            <summary>
            Gets or sets the name (key).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.IgnoreCase">
            <summary>
            Gets or sets the ignore case for the Header Key.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.RejectOnMatch">
            <summary>
            Gets or sets the Reject on match for the Header Key.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.MappingModel">
            <summary>
            MappingModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.UpdatedAt">
            <summary>
            The datetime when this mapping was created or updated.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.TimeSettings">
            <summary>
            Gets or sets the TimeSettings when which this mapping should be used.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Title">
            <summary>
            The unique title.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Priority">
            <summary>
            The priority. (A low value means higher priority.)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Scenario">
            <summary>
            The Scenario.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.WhenStateIs">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.SetStateTo">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Request">
            <summary>
            The request model.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Response">
            <summary>
            The response model.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.SaveToFile">
            <summary>
            Saves this mapping as a static mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Webhook">
            <summary>
            The Webhook.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Webhooks">
            <summary>
            The Webhooks.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.UseWebhooksFireAndForget">
            <summary>
            Fire and forget for webhooks.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Data">
            <summary>
            Data Object which can be used when WithTransformer is used.
            e.g. lookup an path in this object using
            <example>
            lookup data "1"
            </example>
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Probability">
            <summary> 
            The probability when this request should be matched. Value is between 0 and 1. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.ProtoDefinition">
            <summary>
            The Grpc ProtoDefinition which is used for this mapping (request and response). [Optional]
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.MatcherModel">
            <summary>
            MatcherModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Pattern">
            <summary>
            Gets or sets the pattern. Can be a string (default) or an object.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Patterns">
            <summary>
            Gets or sets the patterns. Can be array of strings (default) or an array of objects.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.PatternAsFile">
            <summary>
            Gets or sets the pattern as a file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.IgnoreCase">
            <summary>
            Gets or sets the ignore case.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.RejectOnMatch">
            <summary>
            Reject on match.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.MatchOperator">
            <summary>
            The Operator to use when multiple patterns are defined. Optional.
            - null      = Same as "or".
            - "or"      = Only one pattern is required to match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Regex">
            <summary>
            Support Regex.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.ContentTypeMatcher">
            <summary>
            ContentType Matcher (image/png; name=image.png)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.ContentDispositionMatcher">
            <summary>
            ContentDisposition Matcher (attachment; filename=image.png)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.ContentTransferEncodingMatcher">
            <summary>
            ContentTransferEncoding Matcher (base64)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.ContentMatcher">
            <summary>
            Content Matcher
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.ProtoBufMessageType">
            <summary>
            The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.XmlNamespaceMap">
            <summary>
            Array of namespace prefix and uri. (optional)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.CustomScalars">
            <summary>
            Mapping of custom GraphQL Scalar name to ClrType. (optional)
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.ParamModel">
            <summary>
            Param Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.IgnoreCase">
            <summary>
            Defines if the key should be matched using case-ignore.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.RejectOnMatch">
            <summary>
            Gets or sets the Reject on match for the Param Name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.PathModel">
            <summary>
            PathModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.PathModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.PathModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.RequestModel">
            <summary>
            RequestModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.ClientIP">
            <summary>
            Gets or sets the ClientIP. (Can be a string or a ClientIPModel)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Path">
            <summary>
            Gets or sets the Path. (Can be a string or a PathModel)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Url">
            <summary>
            Gets or sets the Url. (Can be a string or a UrlModel)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.HttpVersion">
            <summary>
            The HTTP Version
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.MethodsRejectOnMatch">
            <summary>
            Reject on match for Methods.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.MethodsMatchOperator">
            <summary>
            The Operator to use when Methods are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one method should match.
            - "and"     = All methods should match.
            - "average" = The average value from all methods.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Headers">
            <summary>
            Gets or sets the Headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Cookies">
            <summary>
            Gets or sets the Cookies.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Params">
            <summary>
            Gets or sets the Params.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.ResponseModel">
            <summary>
            ResponseModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.StatusCode">
            <summary>
            Gets or sets the HTTP status.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyDestination">
            <summary>
            Gets or sets the body destination (SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsJson">
            <summary>
            Gets or sets the body (as JSON object).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsJsonIndented">
            <summary>
            Gets or sets a value indicating whether child objects to be indented according to the Newtonsoft.Json.JsonTextWriter.Indentation and Newtonsoft.Json.JsonTextWriter.IndentChar settings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsBytes">
            <summary>
            Gets or sets the body (as byte array).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsFile">
            <summary>
            Gets or sets the body as a file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyEncoding">
            <summary>
            Gets or sets the body encoding.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.UseTransformer">
            <summary>
            Use ResponseMessage Transformer.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.TransformerType">
            <summary>
            Gets the type of the transformer.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.UseTransformerForBodyAsFile">
            <summary>
            Use the Handlebars transformer for the content from the referenced BodyAsFile.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.TransformerReplaceNodeOptions">
            <summary>
            The ReplaceNodeOptions to use when transforming a JSON node.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.HeadersRaw">
            <summary>
            Gets or sets the Headers (Raw).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.TrailingHeaders">
            <summary>
            Gets or sets the Trailing Headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.MinimumRandomDelay">
            <summary>
            Gets or sets the minimum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.MaximumRandomDelay">
            <summary>
            Gets or sets the maximum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.ProxyUrl">
            <summary>
            Gets or sets the Proxy URL.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.ProxyUrlReplaceSettings">
            <summary>
            Defines the Proxy Url Replace Settings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.X509Certificate2ThumbprintOrSubjectName">
            <summary>
            The client X509Certificate2 Thumbprint or SubjectName to use.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Fault">
            <summary>
            Gets or sets the fault.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.WebProxy">
            <summary>
            Gets or sets the WebProxy settings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.ProtoDefinition">
            <summary>
            Gets or sets the proto definition.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.ProtoBufMessageType">
            <summary>
            Gets or sets the full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.StatusModel">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.StatusModel.Guid">
            <summary>
            The optional guid.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.StatusModel.Status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.StatusModel.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.UrlModel">
            <summary>
            UrlModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.UrlModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.UrlModel.MatchOperator">
            <summary>
            The Operator to use when matchers are defined. [Optional]
            - null      = Same as "or".
            - "or"      = Only one pattern should match.
            - "and"     = All patterns should match.
            - "average" = The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.WebhookModel">
            <summary>
            The Webhook
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookModel.Request">
            <summary>
            The Webhook Request.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.WebhookRequestModel">
            <summary>
            RequestModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.Url">
            <summary>
            Gets or sets the Url.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.Method">
            <summary>
            The method
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.BodyAsJson">
            <summary>
            Gets or sets the body (as JSON object).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.UseTransformer">
            <summary>
            Use ResponseMessage Transformer.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.TransformerType">
            <summary>
            Gets the type of the transformer.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.TransformerReplaceNodeOptions">
            <summary>
            The ReplaceNodeOptions to use when transforming a JSON node.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.MinimumRandomDelay">
            <summary>
            Gets or sets the minimum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebhookRequestModel.MaximumRandomDelay">
            <summary>
            Gets or sets the maximum random delay in milliseconds.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.WebProxyModel">
            <summary>
            WebProxy settings
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebProxyModel.Address">
            <summary>
            A string instance that contains the address of the proxy server.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebProxyModel.UserName">
            <summary>
            The user name associated with the credentials. [optional]
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.WebProxyModel.Password">
            <summary>
            The password for the user name associated with the credentials. [optional]
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.XmlNamespace">
            <summary>
            Defines an xml namespace consisting of prefix and uri.
            <example>xmlns:i="http://www.w3.org/2001/XMLSchema-instance"</example>
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.XmlNamespace.Prefix">
            <summary>
            The prefix.
            <example>i</example>
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.XmlNamespace.Uri">
            <summary>
            The uri.
            <example>http://www.w3.org/2001/XMLSchema-instance</example>
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.RequestModelBuilder">
            <summary>
            RequestModelBuilder
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingConnect">
            <summary>
            UsingConnect: add HTTP Method matching on `CONNECT`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingDelete">
            <summary>
            UsingDelete: add HTTP Method matching on `DELETE`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingGet">
            <summary>
            UsingGet: add HTTP Method matching on `GET`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingHead">
            <summary>
            UsingHead: Add HTTP Method matching on `HEAD`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingPost">
            <summary>
            UsingPost: add HTTP Method matching on `POST`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingPatch">
            <summary>
            UsingPatch: add HTTP Method matching on `PATCH`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingOptions">
            <summary>
            UsingPut: add HTTP Method matching on `OPTIONS`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingPut">
            <summary>
            UsingPut: add HTTP Method matching on `PUT`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingTrace">
            <summary>
            UsingTrace: add HTTP Method matching on `TRACE`.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.UsingAnyMethod">
            <summary>
            UsingAnyMethod: add HTTP Method matching on any method.
            </summary>
            <returns>The <see cref="T:WireMock.Admin.Mappings.RequestModelBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithClientIP(System.String)">
            <summary>
            Set the ClientIP.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithClientIP(WireMock.Admin.Mappings.ClientIPModel)">
            <summary>
            Set the ClientIP.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithClientIP(System.Action{WireMock.Admin.Mappings.ClientIPModelBuilder})">
            <summary>
            Set the ClientIP.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithPath(System.String)">
            <summary>
            Set the Path.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithPath(WireMock.Admin.Mappings.PathModel)">
            <summary>
            Set the Path.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithPath(System.Action{WireMock.Admin.Mappings.PathModelBuilder})">
            <summary>
            Set the Path.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithUrl(System.String)">
            <summary>
            Set the Url.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithUrl(WireMock.Admin.Mappings.UrlModel)">
            <summary>
            Set the Url.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.RequestModelBuilder.WithUrl(System.Action{WireMock.Admin.Mappings.UrlModelBuilder})">
            <summary>
            Set the Url.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.ResponseModelBuilder">
            <summary>
            ResponseModelBuilder
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.ResponseModelBuilder.WithStatusCode(System.Int32)">
            <summary>
            Set the StatusCode.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.ResponseModelBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Set the StatusCode.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.ResponseModelBuilder.WithDelay(System.TimeSpan)">
            <summary>
            Set the Delay.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.ResponseModelBuilder.WithMinimumRandomDelay(System.TimeSpan)">
            <summary>
            Set the MinimumRandomDelay.
            </summary>
        </member>
        <member name="M:WireMock.Admin.Mappings.ResponseModelBuilder.WithMaximumRandomDelay(System.TimeSpan)">
            <summary>
            Set the MaximumRandomDelay.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Requests.LogEntryModel">
            <summary>
            Request Log Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Guid">
            <summary>
            The unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Request">
            <summary>
            The request.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Response">
            <summary>
            The response.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.MappingGuid">
            <summary>
            The mapping unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.MappingTitle">
            <summary>
            The mapping unique title.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.RequestMatchResult">
            <summary>
            The request match result.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.PartialMappingGuid">
            <summary>
            The partial mapping unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.PartialMappingTitle">
            <summary>
            The partial mapping unique title.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.PartialRequestMatchResult">
            <summary>
            The partial request match result.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Requests.LogRequestMatchModel">
            <summary>
            LogRequestMatchModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.TotalScore">
            <summary>
            Gets or sets the match-score.
            </summary>
            <value>
            The match-score.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.TotalNumber">
            <summary>
            Gets or sets the total number of matches.
            </summary>
            <value>
            The total number of matches.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.IsPerfectMatch">
            <summary>
            Gets or sets a value indicating whether this instance is perfect match.
            </summary>
            <value>
            <c>true</c> if this instance is perfect match; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.AverageTotalScore">
            <summary>
            Gets the match percentage.
            </summary>
            <value>
            The match percentage.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.MatchDetails">
            <summary>
            Gets the match details.
            </summary>
            <value>
            The match details.
            </value>
        </member>
        <member name="T:WireMock.Admin.Requests.LogRequestModel">
            <summary>
            RequestMessage Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.ClientIP">
            <summary>
            The Client IP Address.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.DateTime">
            <summary>
            The DateTime.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Path">
            <summary>
            The Path.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.AbsolutePath">
            <summary>
            The Absolute Path.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Url">
            <summary>
            Gets the url (relative).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.AbsoluteUrl">
            <summary>
            The absolute URL.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.ProxyUrl">
            <summary>
            The ProxyUrl (if a proxy is used).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.HttpVersion">
            <summary>
            The HTTP Version.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Headers">
            <summary>
            The Headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Cookies">
            <summary>
            The Cookies.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Body">
            <summary>
            The body (as string).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.BodyAsJson">
            <summary>
            The body (as JSON object).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.BodyAsBytes">
            <summary>
            The body (as bytearray).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.BodyEncoding">
            <summary>
            The body encoding.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.DetectedBodyType">
            <summary>
            The DetectedBodyType, valid values are:
            
            - None
            - String
            - Json
            - Bytes
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.DetectedBodyTypeFromContentType">
            <summary>
            The DetectedBodyTypeFromContentType, valid values are:
            
            - None
            - String
            - Json
            - Bytes
            </summary>
        </member>
        <member name="T:WireMock.Admin.Requests.LogResponseModel">
            <summary>
            Response MessageModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyDestination">
            <summary>
            Gets or sets the body destination (SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.Body">
            <summary>
            The body (as string).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsJson">
            <summary>
            The body (as JSON object).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsBytes">
            <summary>
            The body (as bytearray).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsFile">
            <summary>
            Gets or sets the body as file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyOriginal">
            <summary>
            Gets or sets the original body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyEncoding">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.DetectedBodyType">
            <summary>
            The detected body type (detection based on body content).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.DetectedBodyTypeFromContentType">
            <summary>
            The detected body type (detection based on Content-Type).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.FaultType">
            <summary>
            The FaultType.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.FaultPercentage">
            <summary>
            Gets or sets the Fault percentage.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Scenarios.ScenarioStateModel">
            <summary>
            ScenarioStateModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Scenarios.ScenarioStateModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Scenarios.ScenarioStateModel.NextState">
            <summary>
            Gets or sets the NextState.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Scenarios.ScenarioStateModel.Started">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.Admin.Scenarios.ScenarioStateModel"/> is started.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Scenarios.ScenarioStateModel.Finished">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.Admin.Scenarios.ScenarioStateModel"/> is finished.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Scenarios.ScenarioStateModel.Counter">
            <summary>
            Gets or sets the state counter.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.ClientX509Certificate2ThumbprintOrSubjectName">
            <summary>
            The clientCertificate thumbprint or subject name fragment to use.
            Example thumbprint : "D2DBF135A8D06ACCD0E1FAD9BFB28678DF7A9818". Example subject name: "www.google.com""
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.WebProxySettings">
            <summary>
            Defines the WebProxySettings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.AllowAutoRedirect">
            <summary>
            Proxy requests should follow redirection (30x).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.Url">
            <summary>
            The URL to proxy.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.SaveMapping">
            <summary>
            Save the mapping for each request/response to the internal Mappings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.SaveMappingToFile">
            <summary>
            Save the mapping for each request/response also to a file. (Note that SaveMapping must also be set to true.)
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.SaveMappingForStatusCodePattern">
            <summary>
            Only save request/response to the internal Mappings if the status code is included in this pattern. (Note that SaveMapping must also be set to true.)
            The pattern can contain a single value like "200", but also ranges like "2xx", "100,300,600" or "100-299,6xx" are supported.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.ExcludedHeaders">
            <summary>
            Defines a list from headers which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.ExcludedCookies">
            <summary>
            Defines a list of cookies which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.UseDefinedRequestMatchers">
             <summary>
             When SaveMapping is set to <c>true</c>, this setting can be used to control the behavior of the generated request matchers for the new mapping.
             - <c>false</c>, the default matchers will be used.
             - <c>true</c>, the defined mappings in the request wil be used for the new mapping.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.AppendGuidToSavedMappingFile">
            <summary>
            Append an unique GUID to the filename from the saved mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.PrefixForSavedMappingFile">
            <summary>
            Set prefix for saved mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.ReplaceSettings">
            <summary>
            Defines the Replace Settings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyAndRecordSettingsModel.ProxyAll">
            <summary>
            Proxy all Api calls, irrespective of any condition
            </summary>
        </member>
        <member name="T:WireMock.Admin.Settings.ProxyUrlReplaceSettingsModel">
            <summary>
            Defines an old path param and a new path param to be replaced when proxying.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyUrlReplaceSettingsModel.OldValue">
            <summary>
            The old path value to be replaced by the new path value
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyUrlReplaceSettingsModel.NewValue">
            <summary>
            The new path value to replace the old value with
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.ProxyUrlReplaceSettingsModel.IgnoreCase">
            <summary>
            Defines if the case should be ignore when replacing.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Settings.SettingsModel">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.GlobalProcessingDelay">
            <summary>
            Gets or sets the global delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.AllowPartialMapping">
            <summary>
            Gets or sets if partial mapping is allowed.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.RequestLogExpirationDuration">
            <summary>
            Gets or sets the RequestLog expiration in hours
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.MaxRequestLogCount">
            <summary>
            Gets or sets the MaxRequestLog count.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.AllowBodyForAllHttpMethods">
            <summary>
            Allow a Body for all HTTP Methods. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.AllowOnlyDefinedHttpStatusCodeInResponse">
            <summary>
            Allow only a HttpStatus Code in the response which is defined. (default set to <c>false</c>).
            - false : also null, 0, empty or invalid HttpStatus codes are allowed.
            - true  : only codes defined in <see cref="T:System.Net.HttpStatusCode"/> are allowed.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.DisableJsonBodyParsing">
            <summary>
            Set to true to disable Json deserialization when processing requests. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.DisableRequestBodyDecompressing">
            <summary>
            Disable support for GZip and Deflate request body decompression. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.DisableDeserializeFormUrlEncoded">
            <summary>
            Set to true to disable FormUrlEncoded deserializing when processing requests. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.HandleRequestsSynchronously">
            <summary>
            Handle all requests synchronously. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.UseRegexExtended">
            <summary>
            Use the RegexExtended instead of the default <see cref="T:System.Text.RegularExpressions.Regex"/>.  (default set to <c>true</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.SaveUnmatchedRequests">
            <summary>
            Save unmatched requests to a file using the <see cref="T:WireMock.Handlers.IFileSystemHandler"/>. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.ReadStaticMappings">
            <summary>
            Gets or sets if the static mappings should be read at startup.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.WatchStaticMappings">
            <summary>
            Watch the static mapping files + folder for changes when running.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.WatchStaticMappingsInSubdirectories">
            <summary>
            A value indicating whether subdirectories within the static mappings path should be monitored.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.CorsPolicyOptions">
            <summary>
            Policies to use when using CORS. By default CORS is disabled. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.ProxyAndRecordSettings">
            <summary>
            The proxy and record settings.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.HostingScheme">
            <summary>
            Defines on which scheme (http/https) to host. (This overrides the <c>UseSSL</c> value).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.DoNotSaveDynamicResponseInLogEntry">
            <summary>
            Don't save the response-string in the LogEntry when WithBody(Func{IRequestMessage, string}) or WithBody(Func{IRequestMessage, Task{string}}) is used. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.QueryParameterMultipleValueSupport">
             <summary>
             See <seealso cref="P:WireMock.Admin.Settings.SettingsModel.QueryParameterMultipleValueSupport"/>.
            
             Default value = "All".
             </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.ProtoDefinitions">
            <summary>
            A list of Grpc ProtoDefinitions which can be used.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Settings.WebProxySettingsModel">
            <summary>
            WebProxySettings
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.WebProxySettingsModel.Address">
            <summary>
            A string instance that contains the address of the proxy server.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.WebProxySettingsModel.UserName">
            <summary>
            The user name associated with the credentials.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.WebProxySettingsModel.Password">
            <summary>
            The password for the user name associated with the credentials.
            </summary>
        </member>
        <member name="T:WireMock.Models.TimeSettingsModel">
            <summary>
            TimeSettingsModel: Start, End and TTL
            </summary>
        </member>
        <member name="P:WireMock.Models.TimeSettingsModel.Start">
            <summary>
            Gets or sets the DateTime from which this mapping should be used. In case this is not defined, it's used (default behavior).
            </summary>
        </member>
        <member name="P:WireMock.Models.TimeSettingsModel.End">
            <summary>
            Gets or sets the DateTime from until this mapping should be used. In case this is not defined, it's used forever (default behavior).
            </summary>
        </member>
        <member name="P:WireMock.Models.TimeSettingsModel.TTL">
            <summary>
            Gets or sets the TTL (Time To Live) in seconds for this mapping. In case this is not defined, it's used (default behavior).
            </summary>
        </member>
        <member name="T:WireMock.Models.IdOrText">
            <summary>
            A structure defining an (optional) Id and a Text.
            </summary>
        </member>
        <member name="P:WireMock.Models.IdOrText.Id">
            <summary>
            The Id [optional].
            </summary>
        </member>
        <member name="P:WireMock.Models.IdOrText.Text">
            <summary>
            The Text.
            </summary>
        </member>
        <member name="P:WireMock.Models.IdOrText.Value">
            <summary>
            When Id is defined, return the Id, else the Text.
            </summary>
        </member>
        <member name="M:WireMock.Models.IdOrText.#ctor(System.String,System.String)">
            <summary>
            Create a IdOrText
            </summary>
            <param name="id">The Id [optional]</param>
            <param name="text">The Text.</param>
        </member>
        <member name="T:WireMock.Models.ITimeSettings">
            <summary>
            TimeSettings: Start, End and TTL
            </summary>
        </member>
        <member name="P:WireMock.Models.ITimeSettings.Start">
            <summary>
            Gets or sets the DateTime from which this mapping should be used. In case this is not defined, it's used (default behavior).
            </summary>
        </member>
        <member name="P:WireMock.Models.ITimeSettings.End">
            <summary>
            Gets or sets the DateTime from until this mapping should be used. In case this is not defined, it's used forever (default behavior).
            </summary>
        </member>
        <member name="P:WireMock.Models.ITimeSettings.TTL">
            <summary>
            Gets or sets the TTL (Time To Live) in seconds for this mapping. In case this is not defined, it's used (default behavior).
            </summary>
        </member>
        <member name="T:WireMock.Models.IWebhook">
            <summary>
            IWebhook
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhook.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="T:WireMock.Models.IWebhookRequest">
            <summary>
            IWebhookRequest
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.Url">
            <summary>
            The Webhook Url.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.Method">
            <summary>
            The method to use.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.Headers">
            <summary>
            The Headers to send.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.BodyData">
            <summary>
            The body to send.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.UseTransformer">
            <summary>
            Use Transformer.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.TransformerType">
            <summary>
            The transformer type.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.TransformerReplaceNodeOptions">
            <summary>
            The ReplaceNodeOptions to use when transforming a JSON node.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.MinimumRandomDelay">
            <summary>
            Gets or sets the minimum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Models.IWebhookRequest.MaximumRandomDelay">
            <summary>
            Gets or sets the maximum random delay in milliseconds.
            </summary>
        </member>
        <member name="T:WireMock.Constants.HttpRequestMethod">
            <summary>
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
            </summary>
        </member>
        <member name="T:WireMock.Handlers.IFileSystemHandler">
            <summary>
            Handler to interact with the file system to handle folders and read and write (static mapping) files.
            </summary>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.GetMappingFolder">
            <summary>
            Gets the folder where the static mappings are located. For local file system, this would be `{CurrentFolder}/__admin/mappings`.
            </summary>
            <returns>The folder name.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.FolderExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path.</param>
            <returns>true if path refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.CreateFolder(System.String)">
            <summary>
             Creates all directories and subdirectories in the specified path unless they already exist.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.EnumerateFiles(System.String,System.Boolean)">
            <summary>
             Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="includeSubdirectories">A value indicating whether subdirectories should also included when enumerating files.</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory (and optionally subdirectories) specified by path.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.ReadMappingFile(System.String)">
            <summary>
            Read a static mapping file as text.
            </summary>
            <param name="path">The path (folder + filename with .json extension).</param>
            <returns>The file content as text.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.WriteMappingFile(System.String,System.String)">
            <summary>
            Write the static mapping file.
            </summary>
            <param name="path">The path (folder + filename with .json extension).</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsFile(System.String)">
            <summary>
            Read a response body file as byte[].
            </summary>
            <param name="path">The path or filename from the file to read.</param>
            <returns>The file content as bytes.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsString(System.String)">
            <summary>
            Read a response body file as text.
            </summary>
            <param name="path">The path or filename from the file to read.</param>
            <returns>The file content as text.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.DeleteFile(System.String)">
            <summary>
            Delete a file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.FileExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing file on disk.
            </summary>
            <param name="filename">The filename.</param>
            <returns>true if path refers to an existing file; false if the file does not exist.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.WriteFile(System.String,System.Byte[])">
            <summary>
            Write a file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.WriteFile(System.String,System.String,System.Byte[])">
            <summary>
            Write a file.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filename">The filename.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.ReadFile(System.String)">
            <summary>
            Read a file as bytes.
            </summary>
            <param name="filename">The filename.</param>
            <returns>The file content as bytes.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.ReadFileAsString(System.String)">
            <summary>
            Read a file as string.
            </summary>
            <param name="filename">The filename.</param>
            <returns>The file content as a string.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.GetUnmatchedRequestsFolder">
            <summary>
            Gets the folder where the unmatched requests should be stored. For local file system, this would be `{CurrentFolder}/requests/unmatched`.
            </summary>
            <returns>The folder name.</returns>
        </member>
        <member name="M:WireMock.Handlers.IFileSystemHandler.WriteUnmatchedRequest(System.String,System.String)">
            <summary>
            Write a unmatched request to the Unmatched RequestsFolder.
            </summary>
            <param name="filename">The filename.</param>
            <param name="text">The text.</param>
        </member>
        <member name="T:WireMock.IRequestMessage">
            <summary>
            IRequestMessage
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.ClientIP">
            <summary>
            Gets the Client IP Address.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Url">
            <summary>
            Gets the url (relative).
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.AbsoluteUrl">
            <summary>
            Gets the AbsoluteUrl.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.ProxyUrl">
            <summary>
            The ProxyUrl (if a proxy is used).
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.DateTime">
            <summary>
            Gets the DateTime.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Path">
            <summary>
            Gets the path (relative).
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.AbsolutePath">
            <summary>
            Gets the AbsolutePath.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.PathSegments">
            <summary>
            Gets the path segments.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.AbsolutePathSegments">
            <summary>
            Gets the absolute path segments.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.HttpVersion">
            <summary>
            Gets the HTTP Version.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Cookies">
            <summary>
            Gets the cookies.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.QueryIgnoreCase">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.RawQuery">
            <summary>
            Gets the raw query.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.BodyData">
            <summary>
            The body.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Body">
            <summary>
            The original body as string.
            Convenience getter for Handlebars and WireMockAssertions.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.BodyAsJson">
            <summary>
            The body (as JSON object).
            Convenience getter for Handlebars and WireMockAssertions.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.BodyAsBytes">
            <summary>
            The body (as bytearray).
            Convenience getter for Handlebars and WireMockAssertions.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.DetectedBodyType">
            <summary>
            The detected body type. Convenience getter for Handlebars.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.DetectedBodyTypeFromContentType">
            <summary>
            The detected body type from the Content-Type header. Convenience getter for Handlebars.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.DetectedCompression">
            <summary>
            The detected compression from the Content-Encoding header. Convenience getter for Handlebars.
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Host">
            <summary>
            Gets the Host
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Protocol">
            <summary>
            Gets the protocol
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Port">
            <summary>
            Gets the port
            </summary>
        </member>
        <member name="P:WireMock.IRequestMessage.Origin">
            <summary>
            Gets the origin
            </summary>
        </member>
        <member name="M:WireMock.IRequestMessage.GetParameter(System.String,System.Boolean)">
            <summary>
            Get a query parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <returns>The query parameter value as WireMockList or null when not found.</returns>
        </member>
        <member name="T:WireMock.IResponseMessage">
            <summary>
            IResponseMessage
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.BodyData">
            <summary>
            The Body.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.BodyDestination">
            <summary>
            Gets the body destination (Null, SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.BodyOriginal">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.FaultPercentage">
            <summary>
            Gets the Fault percentage.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.FaultType">
            <summary>
            The FaultType.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.TrailingHeaders">
            <summary>
            Gets the trailing headers.
            </summary>
        </member>
        <member name="P:WireMock.IResponseMessage.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="M:WireMock.IResponseMessage.AddHeader(System.String,System.String)">
            <summary>
            Adds the header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.IResponseMessage.AddHeader(System.String,System.String[])">
            <summary>
            Adds the trailing header.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.IResponseMessage.AddTrailingHeader(System.String,System.String)">
            <summary>
            Adds the trailing header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.IResponseMessage.AddTrailingHeader(System.String,System.String[])">
            <summary>
            Adds the header.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
        </member>
        <member name="T:WireMock.Logging.ILogEntry">
            <summary>
            ILogEntry
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.MappingGuid">
            <summary>
            Gets the mapping unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.MappingTitle">
            <summary>
            Gets the mapping unique title.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.PartialMappingGuid">
            <summary>
            Gets the partial mapping unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.PartialMappingTitle">
            <summary>
            Gets the partial mapping unique title.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.PartialMatchResult">
            <summary>
            Gets the partial match result.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.RequestMatchResult">
            <summary>
            Gets the request match result.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.RequestMessage">
            <summary>
            Gets the request message.
            </summary>
        </member>
        <member name="P:WireMock.Logging.ILogEntry.ResponseMessage">
            <summary>
            Gets the response message.
            </summary>
        </member>
        <member name="T:WireMock.Logging.IWireMockLogger">
            <summary>
            IWireMockLogger interface
            </summary>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the message at the Debug level using the specified parameters. 
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.Info(System.String,System.Object[])">
            <summary>
            Writes the message at the Info level using the specified parameters. 
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the message at the Warning level using the specified parameters. 
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Object[])">
            <summary>
            Writes the message at the Error level using the specified parameters. 
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Exception)">
            <summary>
            Writes the message at the Error level using the specified exception. 
            </summary>
            <param name="formatString">The format string.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:WireMock.Logging.IWireMockLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)">
            <summary>
            Writes the LogEntryModel (LogRequestModel, LogResponseModel and more).
            </summary>
            <param name="logEntryModel">The Request Log Model.</param>
            <param name="isAdminRequest">Defines if this request is an admin request.</param>
        </member>
        <member name="T:WireMock.Matchers.Request.IRequestMatcher">
            <summary>
            The RequestMatcher interface.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.IRequestMatchResult">
            <summary>
            IRequestMatchResult
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.IRequestMatchResult.AverageTotalScore">
            <summary>
            Gets the match percentage.
            </summary>
            <value>
            The match percentage.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.IRequestMatchResult.IsPerfectMatch">
            <summary>
            Gets or sets a value indicating whether this instance is perfect match.
            </summary>
            <value>
            <c>true</c> if this instance is perfect match; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.IRequestMatchResult.MatchDetails">
            <summary>
            Gets the match details.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.IRequestMatchResult.TotalNumber">
            <summary>
            Gets or sets the total number of matches.
            </summary>
            <value>
            The total number of matches.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.IRequestMatchResult.TotalScore">
            <summary>
            Gets or sets the match-score.
            </summary>
            <value>
            The match-score.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.IRequestMatchResult.AddScore(System.Type,System.Double,System.Exception)">
            <summary>
            Adds the score.
            </summary>
            <param name="matcherType">The matcher Type.</param>
            <param name="score">The score.</param>
            <param name="exception">The exception [Optional].</param>
            <returns>The score.</returns>
        </member>
        <member name="T:WireMock.Matchers.Request.MatchDetail">
            <summary>
            MatchDetail
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.MatchDetail.MatcherType">
            <summary>
            Gets or sets the type of the matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.MatchDetail.Score">
            <summary>
            Gets or sets the score between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.MatchDetail.Exception">
            <summary>
            The exception in case the Matcher throws exception.
            [Optional]
            </summary>
        </member>
        <member name="T:WireMock.Util.IBodyData">
            <summary>
            IBodyData
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsBytes">
            <summary>
            The body (as byte array).
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsFile">
            <summary>
            Gets or sets the body as a file.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsJson">
            <summary>
            The body (as JSON object).
            Also used for ProtoBuf.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsJsonIndented">
            <summary>
            Gets or sets a value indicating whether child objects to be indented according to the Newtonsoft.Json.JsonTextWriter.Indentation and Newtonsoft.Json.JsonTextWriter.IndentChar settings.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsString">
            <summary>
            The body as string, this is defined when BodyAsString or BodyAsJson are not null.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.BodyAsFormUrlEncoded">
            <summary>
            The body as Form UrlEncoded dictionary.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.DetectedBodyType">
            <summary>
            The detected body type (detection based on body content).
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.DetectedBodyTypeFromContentType">
            <summary>
            The detected body type (detection based on Content-Type).
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.DetectedCompression">
            <summary>
            The detected compression.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.Encoding">
            <summary>
            The body encoding.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.IsFuncUsed">
            <summary>
            Defines if this BodyData is the result of a dynamically created response-string. (
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.ProtoDefinition">
            <summary>
            Gets or sets the proto definition.
            </summary>
        </member>
        <member name="P:WireMock.Util.IBodyData.ProtoBufMessageType">
            <summary>
            Gets or sets the full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.FaultType">
            <summary>
            The FaultType enumeration
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.FaultType.NONE">
            <summary>
            No Fault
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.FaultType.EMPTY_RESPONSE">
            <summary>
            Return a completely empty response.
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.FaultType.MALFORMED_RESPONSE_CHUNK">
            <summary>
            Send a defined status header, then garbage, then close the connection.
            </summary>
        </member>
        <member name="T:WireMock.Server.IWireMockServer">
            <summary>
            The fluent mock server interface.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.IsStarted">
            <summary>
            Gets a value indicating whether this server is started.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.IsStartedWithAdminInterface">
            <summary>
            Gets a value indicating whether this server is started with the admin interface enabled.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.LogEntries">
            <summary>
            Gets the request logs.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.MappingModels">
            <summary>
            Gets the mappings as MappingModels.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Ports">
            <summary>
            Gets the ports.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Port">
            <summary>
            Gets the first port.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Urls">
            <summary>
            Gets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Url">
            <summary>
            Gets the first url.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Consumer">
            <summary>
            Gets the consumer.
            </summary>
        </member>
        <member name="P:WireMock.Server.IWireMockServer.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="E:WireMock.Server.IWireMockServer.LogEntriesChanged">
            <summary>
            Occurs when [log entries changed].
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.AddCatchAllMapping">
            <summary>
            Adds a 'catch all mapping'
            
            - matches all Paths and any Methods
            - priority is set to 1000
            - responds with a 404 "No matching mapping found"
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.AddGlobalProcessingDelay(System.TimeSpan)">
            <summary>
            The add request processing delay.
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.AllowPartialMapping(System.Boolean)">
            <summary>
            Allows the partial mapping.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.DeleteLogEntry(System.Guid)">
            <summary>
            Deletes a LogEntry.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.DeleteMapping(System.Guid)">
            <summary>
            Deletes the mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ReadStaticMappingAndAddOrUpdate(System.String)">
            <summary>
            Reads a static mapping file and adds or updates a single mapping.
            
            Calling this method manually forces WireMock.Net to read and apply the specified static mapping file.
            </summary>
            <param name="path">The path to the static mapping file.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ReadStaticMappings(System.String)">
            <summary>
            Reads the static mappings from a folder.
            (This method is also used when WireMockServerSettings.ReadStaticMappings is set to true.
            
            Calling this method manually forces WireMock.Net to read and apply all static mapping files in the specified folder.
            </summary>
            <param name="folder">The optional folder. If not defined, use {CurrentFolder}/__admin/mappings</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.RemoveAuthentication">
            <summary>
            Removes the authentication.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.Reset">
            <summary>
            Resets LogEntries, Mappings and Scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ResetMappings">
            <summary>
            Resets the Mappings.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ResetScenarios">
            <summary>
            Resets all Scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ResetScenario(System.String)">
            <summary>
            Resets a specific Scenario by the name.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.ResetLogEntries">
            <summary>
            Resets the LogEntries.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.SaveStaticMappings(System.String)">
            <summary>
            Saves the static mappings.
            </summary>
            <param name="folder">The optional folder. If not defined, use {CurrentFolder}/__admin/mappings</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.SetAzureADAuthentication(System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="tenant">The Tenant.</param>
            <param name="audience">The Audience or Resource.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.SetBasicAuthentication(System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})">
            <summary>
            Sets the maximum RequestLog count.
            </summary>
            <param name="maxRequestLogCount">The maximum RequestLog count.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})">
            <summary>
            Sets RequestLog expiration in hours.
            </summary>
            <param name="requestLogExpirationDuration">The RequestLog expiration in hours.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.Stop">
            <summary>
            Stop this server.
            </summary>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.WatchStaticMappings(System.String)">
            <summary>
            Watches the static mappings for changes.
            </summary>
            <param name="folder">The optional folder. If not defined, use {CurrentFolder}/__admin/mappings</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.WithMapping(WireMock.Admin.Mappings.MappingModel[])">
            <summary>
            Register the mappings (via <see cref="T:WireMock.Admin.Mappings.MappingModel"/>).
            
            This can be used if you have 1 or more <see cref="T:WireMock.Admin.Mappings.MappingModel"/> defined and want to register these in WireMock.Net directly instead of using the fluent syntax.
            </summary>
            <param name="mappings">The MappingModels</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.WithMapping(System.String)">
            <summary>
            Register the mappings (via json string).
            
            This can be used if you the mappings as json string defined and want to register these in WireMock.Net directly instead of using the fluent syntax.
            </summary>
            <param name="mappings">The mapping(s) as json string.</param>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.MappingToCSharpCode(System.Guid,WireMock.Types.MappingConverterType)">
            <summary>
            Get the C# code for a mapping.
            </summary>
            <param name="guid">The Mapping Guid.</param>
            <param name="converterType">The <see cref="T:WireMock.Types.MappingConverterType"/></param>
            <returns>C# code (null in case the mapping is not found)</returns>
        </member>
        <member name="M:WireMock.Server.IWireMockServer.MappingsToCSharpCode(WireMock.Types.MappingConverterType)">
            <summary>
            Get the C# code for all mappings.
            </summary>
            <param name="converterType">The <see cref="T:WireMock.Types.MappingConverterType"/></param>
            <returns>C# code</returns>
        </member>
        <member name="T:WireMock.Types.BodyType">
            <summary>
            The BodyType
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.None">
            <summary>
            No body present
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.String">
            <summary>
            Body is a String
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.Json">
            <summary>
            Body is a Json object
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.Bytes">
            <summary>
            Body is a Byte array
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.File">
            <summary>
            Body is a File
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.MultiPart">
            <summary>
            Body is a MultiPart
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.FormUrlEncoded">
            <summary>
            Body is a String which is x-www-form-urlencoded.
            </summary>
        </member>
        <member name="F:WireMock.Types.BodyType.ProtoBuf">
            <summary>
            Body is a ProtoBuf Byte array
            </summary>
        </member>
        <member name="T:WireMock.Types.CorsPolicyOptions">
            <summary>
            Policies to use when using CORS.
            </summary>
        </member>
        <member name="F:WireMock.Types.CorsPolicyOptions.None">
            <summary>
            Cors is disabled
            </summary>
        </member>
        <member name="F:WireMock.Types.CorsPolicyOptions.AllowAnyHeader">
            <summary>
            Ensures that the policy allows any header.
            </summary>
        </member>
        <member name="F:WireMock.Types.CorsPolicyOptions.AllowAnyMethod">
            <summary>
            Ensures that the policy allows any method.
            </summary>
        </member>
        <member name="F:WireMock.Types.CorsPolicyOptions.AllowAnyOrigin">
            <summary>
            Ensures that the policy allows any origin.
            </summary>
        </member>
        <member name="F:WireMock.Types.CorsPolicyOptions.AllowAll">
            <summary>
            Ensures that the policy allows any header, method and origin.
            </summary>
        </member>
        <member name="T:WireMock.Types.MappingConverterType">
            <summary>
            
            </summary>
        </member>
        <member name="T:WireMock.Types.ReplaceNodeOptions">
            <summary>
            Logic to use when replace a JSON node using the Transformer.
            </summary>
        </member>
        <member name="F:WireMock.Types.ReplaceNodeOptions.EvaluateAndTryToConvert">
             <summary>
             Try to evaluate a templated value.
             In case this is valid, return the value and if the value can be converted to a supported (primitive) type, use that value.
            
             [Default behaviour]
             </summary>
        </member>
        <member name="F:WireMock.Types.ReplaceNodeOptions.Evaluate">
            <summary>
            Parse templated string to a templated string.
            For example: keep a templated string value (which is always the case) as a string value.
            </summary>
        </member>
        <member name="T:WireMock.Types.TransformerType">
            <summary>
            The ResponseMessage Transformers
            </summary>
        </member>
        <member name="F:WireMock.Types.TransformerType.Handlebars">
            <summary>
            https://github.com/Handlebars-Net/Handlebars.Net
            </summary>
        </member>
        <member name="F:WireMock.Types.TransformerType.Scriban">
            <summary>
            https://github.com/scriban/scriban : default
            </summary>
        </member>
        <member name="F:WireMock.Types.TransformerType.ScribanDotLiquid">
            <summary>
            https://github.com/scriban/scriban : DotLiquid
            </summary>
        </member>
        <member name="T:WireMock.Types.WireMockList`1">
            <summary>
            A special List which overrides the ToString() to return first value.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:WireMock.Types.WireMockList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Types.WireMockList`1"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Types.WireMockList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Types.WireMockList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:WireMock.Types.WireMockList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Types.WireMockList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:WireMock.Types.WireMockList`1.op_Implicit(`0)~WireMock.Types.WireMockList{`0}">
            <summary>
            Operator for setting T
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:WireMock.Types.WireMockList`1.op_Implicit(`0[])~WireMock.Types.WireMockList{`0}">
            <summary>
            Operator for setting T[]
            </summary>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:WireMock.Types.WireMockList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="!:ReadOnlySpan&lt;T&gt;"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
