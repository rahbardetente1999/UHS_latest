<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WireMock.Net</name>
    </assembly>
    <members>
        <member name="T:WireMock.Authentication.AzureADAuthenticationMatcher">
            <summary>
            https://www.c-sharpcorner.com/article/how-to-validate-azure-ad-token-using-console-application/
            https://stackoverflow.com/questions/38684865/validation-of-an-azure-ad-bearer-token-in-a-console-application
            </summary>
        </member>
        <member name="T:WireMock.Exceptions.WireMockException">
            <summary>
            WireMockException
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:WireMock.Handlers.LocalFileSystemHandler">
            <summary>
            Default implementation for a handler to interact with the local file system to read and write static mapping files.
            </summary>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Handlers.LocalFileSystemHandler"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Handlers.LocalFileSystemHandler"/> class.
            </summary>
            <param name="rootFolder">The root folder.</param>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.FolderExists(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.FolderExists(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.CreateFolder(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.CreateFolder(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.EnumerateFiles(System.String,System.Boolean)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.EnumerateFiles(System.String,System.Boolean)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.GetMappingFolder">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.GetMappingFolder"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadMappingFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadMappingFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteMappingFile(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.WriteMappingFile(System.String,System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadResponseBodyAsFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadResponseBodyAsString(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsString(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.FileExists(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.FileExists(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteFile(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteFile(System.String,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.DeleteFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.DeleteFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadFileAsString(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadFileAsString(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.GetUnmatchedRequestsFolder">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.GetUnmatchedRequestsFolder"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteUnmatchedRequest(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.WriteUnmatchedRequest(System.String,System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.AdjustPathForMappingFolder(System.String)">
            <summary>
            Adjusts the path to the MappingFolder.
            </summary>
            <param name="filename">The path.</param>
            <returns>Adjusted path</returns>
        </member>
        <member name="M:WireMock.HttpsCertificate.CertificateLoader.LoadCertificate(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used by the WireMock.Net server
            </summary>
        </member>
        <member name="M:WireMock.HttpsCertificate.CertificateLoader.LoadCertificate(System.String)">
            <summary>
            Used for Proxy
            </summary>
        </member>
        <member name="T:WireMock.HttpsCertificate.PublicCertificateHelper">
            <summary>
            Only used for NetStandard 1.3
            </summary>
        </member>
        <member name="M:WireMock.Http.ByteArrayContentHelper.Create(System.Byte[],System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a ByteArrayContent object.
            </summary>
            <param name="content">The byte[] content (cannot be null)</param>
            <param name="contentType">The ContentType (can be null)</param>
            <returns>ByteArrayContent</returns>
        </member>
        <member name="T:WireMock.Http.HttpKnownHeaderNames">
            <summary>
            Copied from https://raw.githubusercontent.com/dotnet/corefx/master/src/Common/src/System/Net/HttpKnownHeaderNames.cs
            </summary>
        </member>
        <member name="M:WireMock.Http.HttpKnownHeaderNames.IsRestrictedResponseHeader(System.String)">
            <summary>Tests whether the specified HTTP header can be set for the response.</summary>
            <param name="headerName">The header to test.</param>
            <returns>true if the header is restricted; otherwise, false.</returns>
        </member>
        <member name="M:WireMock.Http.StringContentHelper.Create(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a StringContent object.
            </summary>
            <param name="content">The string content (cannot be null)</param>
            <param name="contentType">The ContentType (can be null)</param>
            <returns>StringContent</returns>
        </member>
        <member name="T:WireMock.IMapping">
            <summary>
            The IMapping interface.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.UpdatedAt">
            <summary>
            The datetime when this mapping was created or updated.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.TimeSettings">
            <summary>
            Gets the TimeSettings (Start, End and TTL).
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Title">
            <summary>
            Gets the unique title.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Path">
            <summary>
            The full filename path for this mapping (only defined for static mappings).
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Priority">
            <summary>
            Gets the priority.  (A low value means higher priority.)
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Scenario">
            <summary>
            Scenario.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.ExecutionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.NextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null, state will not be changed.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.StateTimes">
            <summary>
            The number of times this match should be matched before the state will be changed to the next state.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.RequestMatcher">
            <summary>
            The RequestMatcher.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Provider">
            <summary>
            The ResponseProvider.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Settings">
            <summary>
            The WireMockServerSettings.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.IsStartState">
            <summary>
            Is State started ?
            </summary>
        </member>
        <member name="P:WireMock.IMapping.IsAdminInterface">
            <summary>
            Gets a value indicating whether this mapping is an Admin Interface.
            </summary>
            <value>
            <c>true</c> if this mapping is an Admin Interface; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.IMapping.IsProxy">
            <summary>
            Gets a value indicating whether this mapping is a Proxy Mapping.
            </summary>
            <value>
            <c>true</c> if this mapping is a Proxy Mapping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.IMapping.LogMapping">
            <summary>
            Gets a value indicating whether this mapping to be logged.
            </summary>
            <value>
            <c>true</c> if this mapping to be logged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.IMapping.Webhooks">
            <summary>
            The Webhooks.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.UseWebhooksFireAndForget">
            <summary>
            Use Fire and Forget for the defined webhook(s). [Optional]
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Data">
            <summary>
            Data Object which can be used when WithTransformer is used.
            e.g. lookup an path in this object using
            <example>
            lookup data "1"
            </example>
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Probability">
            <summary> 
            The probability when this request should be matched. Value is between 0 and 1. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.IMapping.ProtoDefinition">
            <summary>
            The Grpc ProtoDefinition which is used for this mapping (request and response). [Optional]
            </summary>
        </member>
        <member name="M:WireMock.IMapping.ProvideResponseAsync(WireMock.IRequestMessage)">
            <summary>
            ProvideResponseAsync
            </summary>
            <param name="requestMessage">The request message.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/> including a new (optional) <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="M:WireMock.IMapping.GetRequestMatchResult(WireMock.IRequestMessage,System.String)">
            <summary>
            Gets the RequestMatchResult based on the RequestMessage.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="nextState">The Next State.</param>
            <returns>The <see cref="T:WireMock.Matchers.Request.IRequestMatchResult"/>.</returns>
        </member>
        <member name="M:WireMock.IMapping.WithScenario(System.String)">
            <summary>
            Define the scenario.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="M:WireMock.IMapping.WithProbability(System.Double)">
            <summary>
            Define the probability when this request should be matched. [Optional]
            </summary>
            <param name="probability">The probability.</param>
            <returns>The <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="M:WireMock.IMapping.WithProtoDefinition(WireMock.Models.IdOrText)">
            <summary>
            Define a Grpc ProtoDefinition which is used for this mapping (request and response).
            </summary>
            <param name="protoDefinition">The proto definition as text.</param>
            <returns>The <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="T:WireMock.IMappingBuilder">
            <summary>
            IMappingBuilder
            </summary>
        </member>
        <member name="M:WireMock.IMappingBuilder.Given(WireMock.Matchers.Request.IRequestMatcher,System.Boolean)">
            <summary>
            The given.
            </summary>
            <param name="requestMatcher">The request matcher.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.IMappingBuilder.GetMappings">
            <summary>
            Gets all the mappings as a list.
            </summary>
            <returns>A list from <see cref="T:WireMock.Admin.Mappings.MappingModel"/>s.</returns>
        </member>
        <member name="M:WireMock.IMappingBuilder.ToJson">
            <summary>
            Convert all mappings to JSON.
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:WireMock.IMappingBuilder.SaveMappingsToFile(System.String)">
            <summary>
            Save all mappings as a single JSON to a file.
            </summary>
            <param name="path">The file to write to.</param>
        </member>
        <member name="M:WireMock.IMappingBuilder.SaveMappingsToFolder(System.String)">
            <summary>
            Save all mappings as multiple JSON files (each file is 1 mapping).
            </summary>
            <param name="folder">The folder to write the files to.</param>
        </member>
        <member name="M:WireMock.IMappingBuilder.ToCSharpCode(System.Guid,WireMock.Types.MappingConverterType)">
            <summary>
            Get the C# code for a mapping.
            </summary>
            <param name="guid">The Mapping Guid.</param>
            <param name="converterType">The <see cref="T:WireMock.Types.MappingConverterType"/></param>
            <returns>C# code (null in case the mapping is not found)</returns>
        </member>
        <member name="M:WireMock.IMappingBuilder.ToCSharpCode(WireMock.Types.MappingConverterType)">
            <summary>
            Get the C# code for all mappings.
            </summary>
            <param name="converterType">The <see cref="T:WireMock.Types.MappingConverterType"/></param>
            <returns>C# code</returns>
        </member>
        <member name="T:WireMock.Json.FloatBehavior">
            <summary>
            Enum to define how to convert an Float in the Json Object.
            </summary>
        </member>
        <member name="F:WireMock.Json.FloatBehavior.UseDouble">
            <summary>
            Convert all Float types in the Json Object to a double. (default)
            </summary>
        </member>
        <member name="F:WireMock.Json.FloatBehavior.UseFloat">
            <summary>
            Convert all Float types in the Json Object to a float (unless overflow).
            </summary>
        </member>
        <member name="F:WireMock.Json.FloatBehavior.UseDecimal">
            <summary>
            Convert all Float types in the Json Object to a decimal (unless overflow).
            </summary>
        </member>
        <member name="T:WireMock.Json.IntegerBehavior">
            <summary>
            Enum to define how to convert an Integer in the Json Object.
            </summary>
        </member>
        <member name="F:WireMock.Json.IntegerBehavior.UseInt">
            <summary>
            Convert all Integer types in the Json Object to a int (unless overflow).
            (default)
            </summary>
        </member>
        <member name="F:WireMock.Json.IntegerBehavior.UseLong">
            <summary>
            Convert all Integer types in the Json Object to a long.
            </summary>
        </member>
        <member name="T:WireMock.Logging.LogEntry">
            <summary>
            LogEntry
            </summary>
        </member>
        <member name="P:WireMock.Logging.LogEntry.Guid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.Guid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMessage">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.RequestMessage" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.ResponseMessage">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.ResponseMessage" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMatchResult">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.RequestMatchResult" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingGuid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.MappingGuid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingTitle">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.MappingTitle" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMappingGuid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMappingGuid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMappingTitle">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMappingTitle" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMatchResult">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMatchResult" />
        </member>
        <member name="T:WireMock.Logging.WireMockConsoleLogger">
            <summary>
            WireMockConsoleLogger which logs to Console
            </summary>
            <seealso cref="T:WireMock.Logging.IWireMockLogger" />
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Logging.WireMockConsoleLogger"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Debug(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Debug(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Info(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Warn(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Warn(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Error(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Error(System.String,System.Exception)">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Exception)"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)">
            <see cref="M:WireMock.Logging.IWireMockLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)"/>
        </member>
        <member name="T:WireMock.Logging.WireMockNullLogger">
            <summary>
            WireMockNullLogger which does not log.
            </summary>
            <seealso cref="T:WireMock.Logging.IWireMockLogger" />
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Debug(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Debug(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Info(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Warn(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Warn(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Error(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Error(System.String,System.Exception)">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Exception)"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)">
            <see cref="M:WireMock.Logging.IWireMockLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)"/>
        </member>
        <member name="T:WireMock.Mapping">
            <summary>
            The Mapping.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Guid">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Title">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Description">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Path">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Priority">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Scenario">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.ExecutionConditionState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.NextState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.StateTimes">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.RequestMatcher">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Provider">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Settings">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.IsStartState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.IsAdminInterface">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.IsProxy">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.LogMapping">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Webhooks">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.UseWebhooksFireAndForget">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.TimeSettings">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Data">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Probability">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.ProtoDefinition">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.#ctor(System.Guid,System.DateTime,System.String,System.String,System.String,WireMock.Settings.WireMockServerSettings,WireMock.Matchers.Request.IRequestMatcher,WireMock.ResponseProviders.IResponseProvider,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32},WireMock.Models.IWebhook[],System.Nullable{System.Boolean},WireMock.Models.ITimeSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Mapping"/> class.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="updatedAt">The datetime when this mapping was created.</param>
            <param name="title">The unique title (can be null).</param>
            <param name="description">The description (can be null).</param>
            <param name="path">The full file path from this mapping title (can be null).</param>
            <param name="settings">The WireMockServerSettings.</param>
            <param name="requestMatcher">The request matcher.</param>
            <param name="provider">The provider.</param>
            <param name="priority">The priority for this mapping.</param>
            <param name="scenario">The scenario. [Optional]</param>
            <param name="executionConditionState">State in which the current mapping can occur. [Optional]</param>
            <param name="nextState">The next state which will occur after the current mapping execution. [Optional]</param>
            <param name="stateTimes">Only when the current state is executed this number, the next state which will occur. [Optional]</param>
            <param name="webhooks">The Webhooks. [Optional]</param>
            <param name="useWebhooksFireAndForget">Use Fire and Forget for the defined webhook(s). [Optional]</param>
            <param name="timeSettings">The TimeSettings. [Optional]</param>
            <param name="data">The data object. [Optional]</param>
        </member>
        <member name="M:WireMock.Mapping.ProvideResponseAsync(WireMock.IRequestMessage)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.GetRequestMatchResult(WireMock.IRequestMessage,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.WithProbability(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.WithScenario(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.WithProtoDefinition(WireMock.Models.IdOrText)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.MappingBuilder">
            <summary>
            MappingBuilder
            </summary>
        </member>
        <member name="M:WireMock.MappingBuilder.#ctor(WireMock.Settings.WireMockServerSettings)">
            <summary>
            Create a MappingBuilder
            </summary>
            <param name="settings">The optional <see cref="T:WireMock.Settings.WireMockServerSettings"/>.</param>
        </member>
        <member name="M:WireMock.MappingBuilder.Given(WireMock.Matchers.Request.IRequestMatcher,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.GetMappings">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.ToJson">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.ToCSharpCode(System.Guid,WireMock.Types.MappingConverterType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.ToCSharpCode(WireMock.Types.MappingConverterType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.SaveMappingsToFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.MappingBuilder.SaveMappingsToFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.RegistrationCallback">
            <summary>
            The registration callback.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
        </member>
        <member name="T:WireMock.Matchers.AbstractJsonPartialMatcher">
            <summary>
            Generic AbstractJsonPartialMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.AbstractJsonPartialMatcher.Regex">
            <summary>
            Support Regex
            </summary>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="value">The string value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="regex">Support Regex.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="value">The object value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="regex">Support Regex.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="regex">Support Regex.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.IsMatch(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.IsMatch(System.String,System.String)">
            <summary>
            Check if two strings are a match (matching can be done exact or wildcard)
            </summary>
        </member>
        <member name="T:WireMock.Matchers.ContentTypeMatcher">
            <summary>
            ContentTypeMatcher which accepts also all charsets
            </summary>
            <seealso cref="T:WireMock.Matchers.RegexMatcher" />
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ContentTypeMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.ExactMatcher">
            <summary>
            ExactMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" /> and <seealso cref="T:WireMock.Matchers.IIgnoreCaseMatcher" />
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param> 
            <param name="value">The string value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="ignoreCase">Ignore the case from the pattern(s).</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.MatchOperator,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="ignoreCase">Ignore the case from the pattern(s).</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.IgnoreCase">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.ExactObjectMatcher">
            <summary>
            ExactObjectMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.Value">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.IBytesMatcher">
            <summary>
            IBytesMatcher
            </summary>
        </member>
        <member name="M:WireMock.Matchers.IBytesMatcher.IsMatchAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="cancellationToken">The CancellationToken [optional].</param>
            <returns>MatchResult</returns>
        </member>
        <member name="T:WireMock.Matchers.ICSharpCodeMatcher">
            <summary>
            CSharpCode / CS-Script Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IObjectMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
        </member>
        <member name="T:WireMock.Matchers.IDecodeBytesMatcher">
            <summary>
            IDecodeBytesMatcher
            </summary>
        </member>
        <member name="M:WireMock.Matchers.IDecodeBytesMatcher.DecodeAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Decode byte array to an object.
            </summary>
            <param name="input">The byte array</param>
            <param name="cancellationToken">The CancellationToken [optional].</param>
            <returns>object</returns>
        </member>
        <member name="T:WireMock.Matchers.IIgnoreCaseMatcher">
            <summary>
            IIgnoreCaseMatcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.IIgnoreCaseMatcher.IgnoreCase">
            <summary>
            Ignore the case from the pattern.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IJsonMatcher">
            <summary>
            IJsonMatcher
            <seealso cref="T:WireMock.Matchers.IObjectMatcher"/> and <seealso cref="T:WireMock.Matchers.IIgnoreCaseMatcher"/>.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IMatcher">
            <summary>
            IMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IMatcher.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IMatcher.MatchBehaviour">
            <summary>
            Gets the match behaviour.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IObjectMatcher">
            <summary>
            IObjectMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IObjectMatcher.Value">
            <summary>
            Gets the value (can be a string or an object).
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>MatchResult</returns>
        </member>
        <member name="T:WireMock.Matchers.IProtoBufMatcher">
            <summary>
            IProtoBufMatcher
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IStringMatcher">
            <summary>
            IStringMatcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IMatcher"/>
        </member>
        <member name="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>MatchResult</returns>
        </member>
        <member name="M:WireMock.Matchers.IStringMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Patterns</returns>
        </member>
        <member name="P:WireMock.Matchers.IStringMatcher.MatchOperator">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchOperator"/>.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.JmesPathMatcher">
            <summary>
            http://jmespath.org/
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.Value">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(WireMock.Matchers.MatchOperator,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.JsonMatcher">
            <summary>
            JsonMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.Value">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.IgnoreCase">
            <inheritdoc cref="P:WireMock.Matchers.IIgnoreCaseMatcher.IgnoreCase"/>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="value">The string value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="value">The object value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.IsMatch(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the input against the matcher value
            </summary>
            <param name="value">Matcher value</param>
            <param name="input">Input value</param>
            <returns></returns>
        </member>
        <member name="T:WireMock.Matchers.JsonPartialMatcher">
            <summary>
            JsonPartialMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonPartialMatcher.Name">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.IsMatch(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.JsonPartialWildcardMatcher">
            <summary>
            JsonPartialWildCardMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonPartialWildcardMatcher.Name">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.IsMatch(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.JsonPathMatcher">
            <summary>
            JsonPathMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.Value">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.LinqMatcher">
            <summary>
            System.Linq.Dynamic.Core Expression Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IObjectMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.Value">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.MatchBehaviour">
            <summary>
            MatchBehaviour (Accept or Reject)
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchBehaviour.AcceptOnMatch">
            <summary>
            Accept on match (default)
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchBehaviour.RejectOnMatch">
            <summary>
            Reject on match
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchBehaviourHelper.Convert(WireMock.Matchers.MatchBehaviour,System.Double)">
            <summary>
            Converts the specified match behaviour and match value to a new match value.
            
            if AcceptOnMatch --> return match (default)
            if RejectOnMatch and match = 0.0 --> return 1.0
            if RejectOnMatch and match = 0.? --> return 0.0
            if RejectOnMatch and match = 1.0 --> return 0.0
            </summary>
            
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="match">The match.</param>
            <returns>match value</returns>
        </member>
        <member name="T:WireMock.Matchers.MatchOperator">
            <summary>
            The Operator to use when multiple patterns are defined.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchOperator.Or">
            <summary>
            Only one pattern needs to  match. [Default]
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchOperator.And">
            <summary>
            All patterns should match.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchOperator.Average">
            <summary>
            The average value from all patterns.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.MatchResult">
            <summary>
            The MatchResult which contains the score (value between 0.0 - 1.0 of the similarity) and an optional error message.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.MatchResult.Score">
            <summary>
            A value between 0.0 - 1.0 of the similarity.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.MatchResult.Exception">
            <summary>
            The exception message) in case the matching fails.
            [Optional]
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.#ctor(System.Double,System.Exception)">
            <summary>
            Create a MatchResult
            </summary>
            <param name="score">A value between 0.0 - 1.0 of the similarity.</param>
            <param name="exception">The exception in case the matching fails. [Optional]</param>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.#ctor(System.Exception)">
            <summary>
            Create a MatchResult
            </summary>
            <param name="exception">The exception in case the matching fails.</param>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.op_Implicit(System.Double)~WireMock.Matchers.MatchResult">
            <summary>
            Implicitly converts a double to a MatchResult.
            </summary>
            <param name="score">The score</param>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.IsPerfect">
            <summary>
            Is the value a perfect match?
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.From(System.Collections.Generic.IReadOnlyList{WireMock.Matchers.MatchResult},WireMock.Matchers.MatchOperator)">
            <summary>
            Create a MatchResult from multiple MatchResults.
            </summary>
            <param name="matchResults">A list of MatchResults.</param>
            <param name="matchOperator">The MatchOperator</param>
            <returns>MatchResult</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchResult.Expand">
            <summary>
            Expand to Tuple
            </summary>
            <returns>Tuple : Score and Exception</returns>
        </member>
        <member name="T:WireMock.Matchers.MatchScores">
            <summary>
            MatchScores
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Tolerance">
            <summary>
            The tolerance
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Mismatch">
            <summary>
            The default mismatch score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Perfect">
            <summary>
            The default perfect match score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.AlmostPerfect">
            <summary>
            The almost perfect match score
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.IsPerfect(System.Double)">
            <summary>
            Is the value a perfect match?
            </summary>
            <param name="value">The value.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Boolean)">
            <summary>
            Convert a bool to the score.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IReadOnlyCollection{System.Boolean},WireMock.Matchers.MatchOperator)">
            <summary>
            Calculates the score from multiple values.
            </summary>
            <param name="values">The values.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/>.</param>
            <returns>average score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IReadOnlyCollection{System.Double},WireMock.Matchers.MatchOperator)">
            <summary>
            Calculates the score from multiple values.
            </summary>
            <param name="values">The values.</param>
            <param name="matchOperator"></param>
            <returns>average score</returns>
        </member>
        <member name="T:WireMock.Matchers.NotNullOrEmptyMatcher">
            <summary>
            NotNullOrEmptyMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.Value">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.#ctor(WireMock.Matchers.MatchBehaviour)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.NotNullOrEmptyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.IsMatch(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.RegexMatcher">
            <summary>
            Regular Expression Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IIgnoreCaseMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean,System.Boolean,WireMock.Matchers.MatchOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean,System.Boolean,WireMock.Matchers.MatchOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean,System.Boolean,WireMock.Matchers.MatchOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.IgnoreCase">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.CompositeMatcherType">
            <summary>
            CompositeMatcherType
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMatchResult">
            <summary>
            RequestMatchResult
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalScore">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalNumber">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.IsPerfectMatch">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.AverageTotalScore">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.MatchDetails">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.AddScore(System.Type,System.Double,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageBodyMatcher">
            <summary>
            The request body matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Func">
            <summary>
            The body function
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.DataFunc">
            <summary>
            The body data function for byte[]
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.JsonFunc">
            <summary>
            The body data function for json
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.BodyDataFunc">
            <summary>
            The body data function for BodyData
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.FormUrlEncodedFunc">
            <summary>
            The body data function for FormUrlEncoded
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Byte[],System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchOperator,WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.MatchOperator"/> to use.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher">
            <summary>
            The request clientIP matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Matchers">
            <summary>
            The matchers
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Funcs">
            <summary>
            The clientIP functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Behaviour">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchBehaviour"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.MatchOperator"/> to use.</param>
            <param name="clientIPs">The clientIPs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="funcs">The clientIP functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher">
            <summary>
            The composite request matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCompositeMatcher.RequestMatchers">
            <summary>
            Gets the request matchers.
            </summary>
            <value>
            The request matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.#ctor(System.Collections.Generic.IEnumerable{WireMock.Matchers.Request.IRequestMatcher},WireMock.Matchers.Request.CompositeMatcherType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
            <param name="type">The CompositeMatcherType type (Defaults to 'And')</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCookieMatcher">
            <summary>
            The request cookie matcher.
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.Request.IRequestMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.MatchBehaviour">
            <summary>
            MatchBehaviour
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.IgnoreCase">
            <summary>
            IgnoreCase
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Funcs">
            <summary>
            The functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageGraphQLMatcher">
            <summary>
            The request body GraphQL matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageGraphQLMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="schema">The schema.</param>
            <param name="customScalars">A dictionary defining the custom scalars used in this schema. [optional]</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageGraphQLMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.#ctor(WireMock.Matchers.MatchOperator,WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageGraphQLMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.MatchOperator"/> to use.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageGraphQLMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher">
            <summary>
            The request header matcher.
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.Request.IRequestMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.MatchBehaviour">
            <summary>
            MatchBehaviour
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.IgnoreCase">
            <summary>
            IgnoreCase
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Funcs">
            <summary>
            The functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.MatchOperator"/> to use.</param>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.MatchOperator"/> to use.</param>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher">
            <summary>
            The request HTTP Version matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.Matcher">
            <summary>
            The matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.Func">
            <summary>
            The func.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.Behaviour">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchBehaviour"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.HttpVersion">
            <summary>
            The HTTP Version
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="httpVersion">The HTTP Version.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matcher">The matcher.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHttpVersionMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageMethodMatcher">
            <summary>
            The request method matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMethodMatcher.MatchBehaviour">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchBehaviour"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMethodMatcher.MatchOperator">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchOperator"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMethodMatcher.Methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageMethodMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageMultiPartMatcher">
            <summary>
            The request body MultiPart matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.MatchBehaviour">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.MatchBehaviour"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageMultiPartMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageMultiPartMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMultiPartMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageParamMatcher">
            <summary>
            The request parameters matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.MatchBehaviour">
            <summary>
            MatchBehaviour
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Funcs">
            <summary>
            The funcs
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.IgnoreCase">
            <summary>
            Defines if the key should be matched using case-ignore.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessagePathMatcher">
            <summary>
            The request path matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Matchers">
            <summary>
            The matchers
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Funcs">
            <summary>
            The path functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Behaviour">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchBehaviour"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessagePathMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessagePathMatcher.MatchOperator"/> to use.</param>
            <param name="paths">The paths.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessagePathMatcher.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="funcs">The path functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageProtoBufMatcher">
            <summary>
            The request body Grpc ProtoBuf matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageProtoBufMatcher.Matcher">
            <summary>
            The ProtoBufMatcher.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageProtoBufMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Func{WireMock.Models.IdOrText},System.String,WireMock.Matchers.IObjectMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageProtoBufMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <param name="protoDefinition">The Func to define The proto definition as text.</param>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="matcher">The optional matcher to use to match the ProtoBuf as (json) object.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageProtoBufMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher">
            <summary>
            The scenario and state matcher.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._executionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._nextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher"/> class.
            </summary>
            <param name="nextState">The next state.</param>
            <param name="executionConditionState">Execution state condition for the current mapping.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageUrlMatcher">
            <summary>
            The request url matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Matchers">
            <summary>
            The matchers
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Funcs">
            <summary>
            The url functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Behaviour">
            <summary>
            The <see cref="T:WireMock.Matchers.MatchBehaviour"/>
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.MatchOperator">
            <summary>
            The <see cref="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.MatchOperator"/>
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.MatchOperator"/> to use.</param>
            <param name="urls">The urls.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.MatchOperator"/> to use. (default = "Or")</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="funcs">The url functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.IRequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.SimMetricsMatcher">
            <summary>
            SimMetricsMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(System.String[],SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],SimMetrics.Net.SimMetricType,WireMock.Matchers.MatchOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.WildcardMatcher">
            <summary>
            WildcardMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.RegexMatcher" />
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean,WireMock.Matchers.MatchOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.WildcardMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.XPathMatcher">
            <summary>
            XPath2Matcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.MatchBehaviour">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.XmlNamespaceMap">
            <summary>
            Array of namespace prefix and uri.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.XPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Admin.Mappings.XmlNamespace[],AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.XPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use. (default = "Or")</param>
            <param name="xmlNamespaceMap">The xml namespaces of the xml document.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.GetPatterns">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.MatchOperator">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.Name">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Util.BodyData">
            <summary>
            BodyData
            </summary>
        </member>
        <member name="P:WireMock.Util.BodyData.Encoding">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsString">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsFormUrlEncoded">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsJson">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsBytes">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsJsonIndented">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsFile">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsFileIsCached">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedBodyType">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedBodyTypeFromContentType">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedCompression">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.IsFuncUsed">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.ProtoDefinition">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Util.BodyData.ProtoBufMessageType">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Util.BytesEncodingUtils">
             <summary>
             Based on:
             http://utf8checker.codeplex.com
             https://github.com/0x53A/Mvvm/blob/master/src/Mvvm/src/Utf8Checker.cs
            
             References:
             http://anubis.dkuug.dk/JTC1/SC2/WG2/docs/n1335
             http://www.cl.cam.ac.uk/~mgk25/ucs/ISO-10646-UTF-8.html
             http://www.unicode.org/versions/corrigendum1.html
             http://www.ietf.org/rfc/rfc2279.txt
             </summary>
        </member>
        <member name="M:WireMock.Util.BytesEncodingUtils.TryGetEncoding(System.Byte[],System.Text.Encoding@)">
            <summary>
            Tries the get the Encoding from an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="encoding">The output encoding.</param>
        </member>
        <member name="T:WireMock.Util.ConcurrentObservableCollection`1">
            <summary>
            A special Collection that overrides methods of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to make them thread safe.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <inheritdoc cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1" /> class. 
            </summary> 
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1"/> class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.ClearItems">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.RemoveItem(System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)"/>
        </member>
        <member name="T:WireMock.Util.DictionaryExtensions">
            <summary>
            Some IDictionary Extensions
            </summary>
        </member>
        <member name="M:WireMock.Util.DictionaryExtensions.Loop``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Loops the dictionary and executes the specified action.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to loop (can be null).</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:WireMock.Util.EnhancedFileSystemWatcher">
            <summary>
            An EnhancedFileSystemWatcher, which can be used to suppress duplicate events that fire on a single change to the file.
            </summary>
            <seealso cref="T:System.IO.FileSystemWatcher" />
        </member>
        <member name="P:WireMock.Util.EnhancedFileSystemWatcher.Interval">
            <summary>
            Interval, in milliseconds, within which events are considered "recent".
            </summary>
        </member>
        <member name="P:WireMock.Util.EnhancedFileSystemWatcher.FilterRecentEvents">
            <summary>
            Allows user to set whether to filter recent events.
            If this is set a false, this class behaves like System.IO.FileSystemWatcher class.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.InitializeMembers(System.Int32)">
            <summary>
            This Method Initializes the private members.
            Interval is set to its default value of 100 millisecond.
            FilterRecentEvents is set to true, _lastFileEvent dictionary is initialized.
            We subscribe to the base class events.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.HasAnotherFileEventOccurredRecently(System.String)">
            <summary>
            This method searches the dictionary to find out when the last event occurred 
            for a particular file. If that event occurred within the specified timespan
            it returns true, else false
            </summary>
            <param name="fileName">The filename to be checked</param>
            <returns>True if an event has occurred within the specified interval, False otherwise</returns>
        </member>
        <member name="T:WireMock.Util.HttpStatusRangeParser">
            <summary>
            Based on https://github.com/tmenier/Flurl/blob/129565361e135e639f1d44a35a78aea4302ac6ca/src/Flurl.Http/HttpStatusRangeParser.cs
            </summary>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Object)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Net.HttpStatusCode)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Int32)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="T:WireMock.Util.HttpVersionParser">
            <summary>
            https://en.wikipedia.org/wiki/HTTP
            </summary>
        </member>
        <member name="M:WireMock.Util.HttpVersionParser.Parse(System.String)">
            <summary>
            Try to extract the version (as a string) from the protocol.
            </summary>
            <param name="protocol">The protocol, something like "HTTP/1.1" or "HTTP/2".</param>
            <returns>The version ("1.1" or "2") if found and valid, else empty string.</returns>
        </member>
        <member name="M:WireMock.Util.JsonUtils.Parse(System.String)">
            <summary>
            Load a Newtonsoft.Json.Linq.JObject from a string that contains JSON.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>A Newtonsoft.Json.Linq.JToken populated from the string that contains JSON.</returns>
        </member>
        <member name="M:WireMock.Util.JsonUtils.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:WireMock.Util.JsonUtils.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:WireMock.Util.PathUtils.CleanPath(System.String)">
            <summary>
            Robust handling of the user defined path.
            Also supports Unix and Windows platforms
            </summary>
            <param name="path">The path to clean</param>
        </member>
        <member name="M:WireMock.Util.PathUtils.RemoveLeadingDirectorySeparators(System.String)">
            <summary>
            Removes leading directory separator chars from the filepath, which could break Path.Combine
            </summary>
            <param name="path">The path to remove the loading DirectorySeparatorChars</param>
        </member>
        <member name="M:WireMock.Util.PathUtils.Combine(System.String,System.String)">
            <summary>
            Combine two paths
            </summary>
            <param name="root">The root path</param>
            <param name="path">The path</param>
        </member>
        <member name="T:WireMock.Util.PortUtils">
            <summary>
            Port Utility class
            </summary>
        </member>
        <member name="M:WireMock.Util.PortUtils.FindFreeTcpPort">
            <summary>
            Finds a free TCP port.
            </summary>
            <remarks>see http://stackoverflow.com/questions/138043/find-the-next-tcp-port-in-net.</remarks>
        </member>
        <member name="M:WireMock.Util.PortUtils.TryExtract(System.String,System.Boolean@,System.Boolean@,System.String@,System.String@,System.Int32@)">
            <summary>
            Extract the isHttps, isHttp2, protocol, host and port from a URL.
            </summary>
        </member>
        <member name="T:WireMock.Util.QueryStringParser">
            <summary>
            Based on https://stackoverflow.com/questions/659887/get-url-parameters-from-a-string-in-net
            </summary>
        </member>
        <member name="T:WireMock.Models.GraphQLSchemaDetails">
            <summary>
            GraphQLSchemaDetails
            </summary>
        </member>
        <member name="P:WireMock.Models.GraphQLSchemaDetails.SchemaAsString">
            <summary>
            The GraphQL schema as a string.
            </summary>
        </member>
        <member name="P:WireMock.Models.GraphQLSchemaDetails.SchemaAsStringPattern">
            <summary>
            The GraphQL schema as a StringPattern.
            </summary>
        </member>
        <member name="P:WireMock.Models.GraphQLSchemaDetails.CustomScalars">
            <summary>
            The custom Scalars to define for this schema.
            </summary>
        </member>
        <member name="T:WireMock.Models.StringPattern">
            <summary>
            StringPattern which defines the Pattern as a string, and optionally the filepath pattern file.
            </summary>
        </member>
        <member name="P:WireMock.Models.StringPattern.Pattern">
            <summary>
            The pattern as string.
            </summary>
        </member>
        <member name="P:WireMock.Models.StringPattern.PatternAsFile">
            <summary>
            The filepath (optionally)
            </summary>
        </member>
        <member name="T:WireMock.Models.TimeSettings">
            <summary>
            TimeSettingsModel: Start, End and TTL
            </summary>
        </member>
        <member name="P:WireMock.Models.TimeSettings.Start">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.TimeSettings.End">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.TimeSettings.TTL">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Models.UrlDetails">
            <summary>
            UrlDetails
            </summary>
        </member>
        <member name="P:WireMock.Models.UrlDetails.Url">
            <summary>
            Gets the url (relative).
            </summary>
        </member>
        <member name="P:WireMock.Models.UrlDetails.AbsoluteUrl">
            <summary>
            Gets the AbsoluteUrl.
            </summary>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="absoluteUrl">The absolute URL.</param>
            <param name="url">The URL (relative).</param>
        </member>
        <member name="T:WireMock.Models.Webhook">
            <summary>
            Webhook
            </summary>
        </member>
        <member name="P:WireMock.Models.Webhook.Request">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Models.WebhookRequest">
            <summary>
            WebhookRequest
            </summary>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Url">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Method">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Headers">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.BodyData">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.UseTransformer">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.TransformerType">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.TransformerReplaceNodeOptions">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Delay">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.MinimumRandomDelay">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.WebhookRequest.MaximumRandomDelay">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Owin.HostUrlDetails">
            <summary>
            https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
            </summary>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.IsStarted">
            <summary>
            Gets a value indicating whether this server is started.
            </summary>
            <value>
            <c>true</c> if this server is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Urls">
            <summary>
            Gets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Ports">
            <summary>
            Gets the ports.
            </summary>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.RunningException">
            <summary>
            The exception occurred when the host is running.
            </summary>
        </member>
        <member name="T:WireMock.Owin.Mappers.IOwinRequestMapper">
            <summary>
            IOwinRequestMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.IOwinRequestMapper.MapAsync(Microsoft.AspNetCore.Http.HttpRequest,WireMock.Owin.IWireMockMiddlewareOptions)">
            <summary>
            MapAsync IRequest to RequestMessage
            </summary>
            <param name="request">The OwinRequest/HttpRequest</param>
            <param name="options">The WireMockMiddlewareOptions</param>
            <returns>RequestMessage</returns>
        </member>
        <member name="T:WireMock.Owin.Mappers.IOwinResponseMapper">
            <summary>
            IOwinResponseMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.IOwinResponseMapper.MapAsync(WireMock.IResponseMessage,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Map ResponseMessage to IResponse.
            </summary>
            <param name="responseMessage">The ResponseMessage</param>
            <param name="response">The OwinResponse/HttpResponse</param>
        </member>
        <member name="T:WireMock.Owin.Mappers.OwinRequestMapper">
            <summary>
            OwinRequestMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinRequestMapper.MapAsync(Microsoft.AspNetCore.Http.HttpRequest,WireMock.Owin.IWireMockMiddlewareOptions)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Owin.Mappers.OwinResponseMapper">
            <summary>
            OwinResponseMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinResponseMapper.#ctor(WireMock.Owin.IWireMockMiddlewareOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">The IWireMockMiddlewareOptions.</param>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinResponseMapper.MapAsync(WireMock.IResponseMessage,Microsoft.AspNetCore.Http.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.AcceptAnyClientCertificate">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.FileSystemHandler">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.FileSystemHandler"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.AllowBodyForAllHttpMethods">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.AllowBodyForAllHttpMethods"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.AllowOnlyDefinedHttpStatusCodeInResponse">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.AllowOnlyDefinedHttpStatusCodeInResponse"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.DisableJsonBodyParsing">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.DisableJsonBodyParsing"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.DisableRequestBodyDecompressing">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.DisableRequestBodyDecompressing"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.HandleRequestsSynchronously">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.HandleRequestsSynchronously"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509StoreName">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509StoreName"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509StoreLocation">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509StoreLocation"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509ThumbprintOrSubjectName">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509ThumbprintOrSubjectName"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509CertificateFilePath">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509CertificateFilePath"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509CertificatePassword">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509CertificatePassword"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.CustomCertificateDefined">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.CustomCertificateDefined"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.SaveUnmatchedRequests">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.SaveUnmatchedRequests"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.DoNotSaveDynamicResponseInLogEntry">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.QueryParameterMultipleValueSupport">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.ProxyAll">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Pact.Models.V2.MatchingRule.Match">
            <summary>
            type or regex
            </summary>
        </member>
        <member name="P:WireMock.Pact.Models.V2.MatchingRule.Min">
            <summary>
            Used for Match = "type"
            </summary>
        </member>
        <member name="P:WireMock.Pact.Models.V2.MatchingRule.Max">
            <summary>
            Used for Match = "type"
            </summary>
        </member>
        <member name="P:WireMock.Pact.Models.V2.MatchingRule.Regex">
            <summary>
            Used for Match = "regex"
            </summary>
        </member>
        <member name="T:WireMock.RegularExpressions.RegexExtended">
            <summary>
            Extension to the <see cref="T:System.Text.RegularExpressions.Regex"/> object, adding support for GUID tokens for matching on.
            </summary>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.ReplaceGuidPattern(System.String)">
            <summary>
            Replaces all instances of valid GUID tokens with the correct regular expression to match.
            </summary>
            <param name="pattern">Pattern to replace token for.</param>
        </member>
        <member name="T:WireMock.RequestBuilders.IBodyRequestBuilder">
            <summary>
            The BodyRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher)">
            <summary>
            WithBody: IMatcher
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher[],WireMock.Matchers.MatchOperator)">
            <summary>
            WithBody: IMatcher[]
            </summary>
            <param name="matchers">The matchers.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as string
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Byte[],WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as byte[]
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Object,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as object
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour [default is AcceptOnMatch].</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBodyAsJson(System.Object,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody : Body as a string response based on a object (which will be converted to a JSON string using NewtonSoft.Json).
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour [default is AcceptOnMatch].</param>
            <returns>A <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBodyAsJson(System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody : Body as a string response based on a object (which will be converted to a JSON string using the <see cref="T:JsonConverter.Abstractions.IJsonConverter"/>).
            </summary>
            <param name="body">The body.</param>
            <param name="converter">The JsonConverter.</param>
            <param name="options">The <see cref="T:JsonConverter.Abstractions.JsonConverterOptions"/> [optional].</param>
            <param name="matchBehaviour">The match behaviour [default is AcceptOnMatch].</param>
            <returns>A <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.String,System.Boolean})">
            <summary>
            WithBody: func (string)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Byte[],System.Boolean})">
            <summary>
            WithBody: func (byte[])
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Object,System.Boolean})">
            <summary>
            WithBody: func (json object)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <summary>
            WithBody: func (BodyData object)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <summary>
            WithBody: Body as form-urlencoded values.
            </summary>
            <param name="func">The form-urlencoded values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBodyAsGraphQLSchema(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBodyAsGraphQLSchema: Body as GraphQL schema as a string.
            </summary>
            <param name="body">The GraphQL schema.</param>
            <param name="matchBehaviour">The match behaviour. (Default is <c>MatchBehaviour.AcceptOnMatch</c>).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IClientIPRequestBuilder">
            <summary>
            The IClientIPRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithClientIP: add clientIP matching based on IStringMatchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithClientIP: add clientIP matching based on MatchOperator and IStringMatchers.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.String[])">
            <summary>
            WithClientIP: add clientIP matching based on clientIPs.
            </summary>
            <param name="clientIPs">The clientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            WithClientIP: add clientIP matching based on clientIPs , matchBehaviour and MatchOperator.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="clientIPs">The clientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithClientIP: add clientIP matching based on functions.
            </summary>
            <param name="funcs">The clientIP funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.ICookiesRequestBuilder">
            <summary>
            The CookieRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, pattern and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, pattern, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, patterns and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, patterns, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name, ignoreCase and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the cookie-keys.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name, ignoreCase, matchBehaviour and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the cookie-keys.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            WithCookie: matching based on functions.
            </summary>
            <param name="funcs">The cookies funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IGraphQLRequestBuilder">
            <summary>
            The GraphQLRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IGraphQLRequestBuilder.WithGraphQLSchema(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGraphQLSchema: The GraphQL schema as a string.
            </summary>
            <param name="schema">The GraphQL schema.</param>
            <param name="matchBehaviour">The match behaviour. (Default is <c>MatchBehaviour.AcceptOnMatch</c>).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IGraphQLRequestBuilder.WithGraphQLSchema(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGraphQLSchema: The GraphQL schema as a string.
            </summary>
            <param name="schema">The GraphQL schema.</param>
            <param name="customScalars">A dictionary defining the custom scalars used in this schema. (optional)</param>
            <param name="matchBehaviour">The match behaviour. (Default is <c>MatchBehaviour.AcceptOnMatch</c>).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IGraphQLRequestBuilder.WithBodyAsGraphQL(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBodyAsGraphQL: The GraphQL schema as a string.
            </summary>
            <param name="schema">The GraphQL schema.</param>
            <param name="matchBehaviour">The match behaviour. (Default is <c>MatchBehaviour.AcceptOnMatch</c>).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IGraphQLRequestBuilder.WithBodyAsGraphQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBodyAsGraphQL: The GraphQL schema as a string.
            </summary>
            <param name="schema">The GraphQL schema.</param>
            <param name="customScalars">A dictionary defining the custom scalars used in this schema. (optional)</param>
            <param name="matchBehaviour">The match behaviour. (Default is <c>MatchBehaviour.AcceptOnMatch</c>).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IHeadersRequestBuilder">
            <summary>
            The HeadersRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, pattern and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, pattern, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <summary>
            WithHeader: matching based on name, patterns and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <summary>
            WithHeader: matching based on name, patterns, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name, ignoreCase and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the header-keys.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name, ignoreCase, matchBehaviour and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the header-keys.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            WithHeader: matching based on functions.
            </summary>
            <param name="funcs">The headers funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IHttpVersionBuilder">
            <summary>
            The HttpVersionBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IHttpVersionBuilder.WithHttpVersion(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHttpVersion
            </summary>
            <param name="version">The HTTP Version to match.</param>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IMethodRequestBuilder">
            <summary>
            The MethodRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingConnect(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingConnect: add HTTP Method matching on `CONNECT` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingDelete(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingDelete: add HTTP Method matching on `DELETE` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingGet(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingGet: add HTTP Method matching on `GET` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingHead(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingHead: Add HTTP Method matching on `HEAD` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPost(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPost: add HTTP Method matching on `POST` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPatch(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPatch: add HTTP Method matching on `PATCH` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingOptions(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPut: add HTTP Method matching on `OPTIONS` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPut(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPut: add HTTP Method matching on `PUT` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingTrace(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingTrace: add HTTP Method matching on `TRACE` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyMethod">
            <summary>
            UsingAnyMethod: add HTTP Method matching on any method.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            UsingMethod: add HTTP Method matching on any methods and matchBehaviour.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="methods">The method or methods.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(System.String[])">
            <summary>
            UsingMethod: add HTTP Method matching on any methods.
            </summary>
            <param name="methods">The method or methods.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IMultiPartRequestBuilder">
            <summary>
            The MultiPartRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IMultiPartRequestBuilder.WithMultiPart(WireMock.Matchers.IMatcher)">
            <summary>
            WithMultiPart: IMatcher
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMultiPartRequestBuilder.WithMultiPart(WireMock.Matchers.IMatcher[],WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <summary>
            WithMultiPart: IMatcher[], MatchBehaviour and MatchOperator
            </summary>
            <param name="matchers">The matchers.</param>
            <param name="matchBehaviour">The <see cref="T:WireMock.Matchers.MatchBehaviour"/> to use.</param>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMultiPartRequestBuilder.WithMultiPart(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IMatcher[])">
            <summary>
            WithMultiPart: MatchBehaviour and IMatcher[]
            </summary>
            <param name="matchBehaviour">The <see cref="T:WireMock.Matchers.MatchBehaviour"/> to use.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IParamsRequestBuilder">
            <summary>
            The ParamsRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithParam: matching on key only.
            </summary>
            <param name="key">The key.</param>
            <param name="matchBehaviour">The match behaviour (optional).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithParam: matching on key only.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchBehaviour">The match behaviour (optional).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.String[])">
            <summary>
            WithParam: matching on key and values.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,System.String[])">
            <summary>
            WithParam: matching on key and values.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key and matchers.
            </summary>
            <param name="key">The key.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key and matchers.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            WithParam: matching on key, values and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])">
            <summary>
            WithParam: matching on key, values and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key, matchers and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="matchers">The matchers.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key, matchers and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            WithParam: matching on functions.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IProtoBufRequestBuilder">
            <summary>
            The ProtoBufRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IProtoBufRequestBuilder.WithBodyAsProtoBuf(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGrpcProto
            </summary>
            <param name="protoDefinition">The proto definition as text.</param>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IProtoBufRequestBuilder.WithBodyAsProtoBuf(System.String,System.String,WireMock.Matchers.IObjectMatcher,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGrpcProto
            </summary>
            <param name="protoDefinition">The proto definition as text.</param>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="matcher">The matcher to use to match the ProtoBuf as (json) object.</param>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IProtoBufRequestBuilder.WithBodyAsProtoBuf(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGrpcProto
            </summary>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IProtoBufRequestBuilder.WithBodyAsProtoBuf(System.String,WireMock.Matchers.IObjectMatcher,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithGrpcProto
            </summary>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="matcher">The matcher to use to match the ProtoBuf as (json) object.</param>
            <param name="matchBehaviour">The match behaviour. (default = "AcceptOnMatch")</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IRequestBuilder">
            <summary>
            IRequestBuilder
            </summary>
        </member>
        <member name="T:WireMock.RequestBuilders.IUrlAndPathRequestBuilder">
            <summary>
            IUrlAndPathRequestBuilder
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithPath: add path matching based on IStringMatchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithPath: add path matching based on MatchOperator and IStringMatchers.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.String[])">
            <summary>
            WithPath: add path matching based on paths.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            WithPath: add path matching based on paths , matchBehaviour and MatchOperator.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithPath: add path matching based on functions.
            </summary>
            <param name="funcs">The path funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithUrl: add url matching based on IStringMatcher[].
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithUrl: add url matching based on MatchOperator and IStringMatchers.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.String[])">
            <summary>
            WithUrl: add url matching based on urls.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.MatchOperator,System.String[])">
            <summary>
            WithUrl: add url matching based on urls.
            </summary>
            <param name="matchOperator">The <see cref="T:WireMock.Matchers.MatchOperator"/> to use.</param>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithUrl: add url matching based on functions.
            </summary>
            <param name="funcs">The url functions.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.Request">
            <summary>
            The Request Builder
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.MatchOperator,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestBuilders.Request.Mapping">
            <summary>
            The link back to the Mapping.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.#ctor(System.Collections.Generic.IList{WireMock.Matchers.Request.IRequestMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.RequestBuilders.Request"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatchers``1">
            <summary>
            Gets the request message matchers.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A List{T}</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatcher``1">
            <summary>
            Gets the request message matcher.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A RequestMatcher</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatcher``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets the request message matcher.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A RequestMatcher</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingConnect(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingDelete(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingGet(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingHead(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingOptions(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPost(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPatch(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPut(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingTrace(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingAnyMethod">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingMethod(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingMethod(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Byte[],WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Object,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsJson(System.Object,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsJson(System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(WireMock.Matchers.IMatcher)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(WireMock.Matchers.IMatcher[],WireMock.Matchers.MatchOperator)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.String,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Byte[],System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Object,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsGraphQLSchema(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsProtoBuf(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsProtoBuf(System.String,System.String,WireMock.Matchers.IObjectMatcher,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsProtoBuf(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsProtoBuf(System.String,WireMock.Matchers.IObjectMatcher,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithGraphQLSchema(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithGraphQLSchema(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsGraphQL(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBodyAsGraphQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String[],WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHttpVersion(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithMultiPart(WireMock.Matchers.IMatcher)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithMultiPart(WireMock.Matchers.IMatcher[],WireMock.Matchers.MatchBehaviour,WireMock.Matchers.MatchOperator)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithMultiPart(WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.MatchOperator,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.Func{System.String,System.Boolean}[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.MatchOperator,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.MatchOperator,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.Func{System.String,System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.Func{System.String,System.Boolean}[])"/>
        </member>
        <member name="T:WireMock.RequestMessage">
            <summary>
            The RequestMessage.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.ClientIP">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Url">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.AbsoluteUrl">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.ProxyUrl">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.DateTime">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Path">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.AbsolutePath">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.PathSegments">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.AbsolutePathSegments">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Method">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.HttpVersion">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Headers">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Cookies">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Query">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.QueryIgnoreCase">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.RawQuery">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.BodyData">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Body">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.BodyAsJson">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.BodyAsBytes">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedBodyType">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedBodyTypeFromContentType">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedCompression">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Host">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Protocol">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Port">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.Origin">
            <inheritdoc />
        </member>
        <member name="P:WireMock.RequestMessage.ClientCertificate">
            <inheritdoc />
        </member>
        <member name="M:WireMock.RequestMessage.#ctor(WireMock.Models.UrlDetails,System.String,System.String,WireMock.Util.IBodyData,System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used for Unit Testing
            </summary>
        </member>
        <member name="M:WireMock.RequestMessage.GetParameter(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.ResponseBuilders.BodyDestinationFormat">
            <summary>
            Defines the BodyDestinationFormat
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.SameAsSource">
            <summary>
            Same as source (no conversion)
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.String">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.Bytes">
            <summary>
            Convert to bytes
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.Json">
            <summary>
            Convert to Json object
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IBodyResponseBuilder">
            <summary>
            The BodyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.String,System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a string.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.IRequestMessage,System.String},System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a callback function.
            </summary>
            <param name="bodyFactory">The delegate to build the body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{System.String}},System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a async callback function.
            </summary>
            <param name="bodyFactory">The async delegate to build the body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a bytearray.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Text.Encoding,System.Nullable{System.Boolean})">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string).
            </summary>
            <param name="body">The body.</param>
            <param name="encoding">The body encoding.</param>
            <param name="indented">Define whether child objects to be indented according to the Newtonsoft.Json.JsonTextWriter.Indentation and Newtonsoft.Json.JsonTextWriter.IndentChar settings.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Boolean)">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string).
            </summary>
            <param name="body">The body.</param>
            <param name="indented">Define whether child objects to be indented according to the Newtonsoft.Json.JsonTextWriter.Indentation and Newtonsoft.Json.JsonTextWriter.IndentChar settings.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Func{WireMock.IRequestMessage,System.Object},System.Text.Encoding)">
            <summary>
            WithBodyAsJson : Create a ... response based on a callback function.
            </summary>
            <param name="bodyFactory">The delegate to build the body.</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{System.Object}},System.Text.Encoding)">
            <summary>
            WithBodyAsJson : Create a ... response based on a async callback function.
            </summary>
            <param name="bodyFactory">The async delegate to build the body.</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromFile(System.String,System.Boolean)">
            <summary>
            WithBodyFromFile : Create a ... response based on a File.
            </summary>
            <param name="filename">The filename.</param>
            <param name="cache">Defines if this file is cached in memory or retrieved from disk every time the response is created.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string using the <see cref="T:JsonConverter.Abstractions.IJsonConverter"/>).
            </summary>
            <param name="body">The body.</param>
            <param name="jsonConverter">The <see cref="T:JsonConverter.Abstractions.IJsonConverter"/>.</param>
            <param name="options">The <see cref="T:JsonConverter.Abstractions.JsonConverterOptions"/> [optional].</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Object,System.Text.Encoding,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string using the <see cref="T:JsonConverter.Abstractions.IJsonConverter"/>).
            </summary>
            <param name="body">The body.</param>
            <param name="encoding">The body encoding, can be <c>null</c>.</param>
            <param name="jsonConverter">The <see cref="T:JsonConverter.Abstractions.IJsonConverter"/>.</param>
            <param name="options">The <see cref="T:JsonConverter.Abstractions.JsonConverterOptions"/> [optional].</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsProtoBuf(System.String,System.String,System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <summary>
            WithBody : Create a ProtoBuf byte[] response based on a proto definition, message type and the value.
            </summary>
            <param name="protoDefinition">The proto definition as text.</param>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="value">The object to convert to protobuf byte[].</param>
            <param name="jsonConverter">The <see cref="T:JsonConverter.Abstractions.IJsonConverter"/> [optional]. Default value is NewtonsoftJsonConverter.</param>
            <param name="options">The <see cref="T:JsonConverter.Abstractions.JsonConverterOptions"/> [optional].</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsProtoBuf(System.String,System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <summary>
            WithBody : Create a ProtoBuf byte[] response based on a proto definition, message type and the value.
            </summary>
            <param name="messageType">The full type of the protobuf (request/response) message object. Format is "{package-name}.{type-name}".</param>
            <param name="value">The object to convert to protobuf byte[].</param>
            <param name="jsonConverter">The <see cref="T:JsonConverter.Abstractions.IJsonConverter"/> [optional]. Default value is NewtonsoftJsonConverter.</param>
            <param name="options">The <see cref="T:JsonConverter.Abstractions.JsonConverterOptions"/> [optional].</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.ICallbackResponseBuilder">
            <summary>
            The CallbackResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.IRequestMessage,WireMock.ResponseMessage})">
            <summary>
            The callback builder
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{WireMock.ResponseMessage}})">
            <summary>
            The async callback builder
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IDelayResponseBuilder">
            <summary>
            The DelayResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.TimeSpan)">
            <summary>
            The delay defined as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="delay">The TimeSpan to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.Int32)">
            <summary>
            The delay defined as milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithRandomDelay(System.Int32,System.Int32)">
            <summary>
            Introduce random delay
            </summary>
            <param name="minimumMilliseconds">Minimum milliseconds to delay</param>
            <param name="maximumMilliseconds">Maximum milliseconds to delay</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IFaultResponseBuilder">
            <summary>
            The FaultRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IFaultResponseBuilder.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})">
            <summary>
            WithBody : Create a fault response.
            </summary>
            <param name="faultType">The FaultType.</param>
            <param name="percentage">The percentage when this fault should occur. When null, it's always a fault.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IHeadersResponseBuilder">
            <summary>
            The HeadersResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeader(System.String,System.String[])">
            <summary>
            The WithHeader.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The WithHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            The WithHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <summary>
            The WithHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithTrailingHeader(System.String,System.String[])">
            <summary>
            The WithTrailingHeader.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The WithTrailingHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            The WithTrailingHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <summary>
            The WithTrailingHeaders.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IProxyResponseBuilder">
            <summary>
            The ProxyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(System.String,System.String)">
            <summary>
            WithProxy URL using Client X509Certificate2.
            </summary>
            <param name="proxyUrl">The proxy url.</param>
            <param name="clientX509Certificate2ThumbprintOrSubjectName">The X509Certificate2 file to use for client authentication.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(WireMock.Settings.ProxyAndRecordSettings)">
            <summary>
            WithProxy using <see cref="T:WireMock.Settings.ProxyAndRecordSettings"/>.
            </summary>
            <param name="settings">The ProxyAndRecordSettings.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            WithProxy using <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <param name="proxyUrl">The proxy url.</param>
            <param name="certificate">The X509Certificate2.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IResponseBuilder">
            <summary>
            The ResponseBuilder interface.
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IStatusCodeResponseBuilder">
            <summary>
            The StatusCodeResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Int32)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.WireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.String)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.WireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.WireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.ITransformResponseBuilder">
            <summary>
            The TransformResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(System.Boolean)">
            <summary>
            Use the Handlebars.Net ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.ReplaceNodeOptions)">
            <summary>
            Use the Handlebars.Net ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.TransformerType,System.Boolean,WireMock.Types.ReplaceNodeOptions)">
            <summary>
            Use a specific ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.Response">
            <summary>
            The Response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Mapping">
            <summary>
            The link back to the mapping.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.MinimumDelayMilliseconds">
            <summary>
            The minimum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.MaximumDelayMilliseconds">
            <summary>
            The maximum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.UseTransformer">
            <summary>
            Gets a value indicating whether [use transformer].
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.TransformerType">
            <summary>
            Gets the type of the transformer.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.UseTransformerForBodyAsFile">
            <summary>
            Gets a value indicating whether to use the Handlebars transformer for the content from the referenced BodyAsFile.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.TransformerReplaceNodeOptions">
            <summary>
            Gets the ReplaceNodeOptions to use when transforming a JSON node.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ResponseMessage">
            <summary>
            Gets the response message.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(WireMock.ResponseMessage)">
            <summary>
            Creates this instance.
            </summary>
            <param name="responseMessage">ResponseMessage</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(System.Func{WireMock.ResponseMessage})">
            <summary>
            Creates this instance with the specified function.
            </summary>
            <param name="func">The callback function.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.#ctor(WireMock.ResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.ResponseBuilders.Response"/> class.
            </summary>
            <param name="responseMessage">The response.</param>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Int32)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Int32)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.String)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.String)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Net.HttpStatusCode)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Net.HttpStatusCode)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(System.Boolean)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(System.Boolean)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(WireMock.Types.ReplaceNodeOptions)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.ReplaceNodeOptions)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(WireMock.Types.TransformerType,System.Boolean,WireMock.Types.ReplaceNodeOptions)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithRandomDelay(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.ProvideResponseAsync(WireMock.IMapping,WireMock.IRequestMessage,WireMock.Settings.WireMockServerSettings)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Func{WireMock.IRequestMessage,System.String},System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{System.String}},System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyFromFile(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Object,System.Text.Encoding,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Func{WireMock.IRequestMessage,System.Object},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{System.Object}},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Object,System.Text.Encoding,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsProtoBuf(System.String,System.String,System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsProtoBuf(System.String,System.Object,JsonConverter.Abstractions.IJsonConverter,JsonConverter.Abstractions.JsonConverterOptions)">
            <inheritdoc />
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Callback">
            <summary>
            A delegate to execute to generate the response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.CallbackAsync">
            <summary>
            A delegate to execute to generate the response async.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.WithCallbackUsed">
            <summary>
            Defines if the method WithCallback(...) is used.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithCallback(System.Func{WireMock.IRequestMessage,WireMock.ResponseMessage})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithCallback(System.Func{WireMock.IRequestMessage,System.Threading.Tasks.Task{WireMock.ResponseMessage}})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IFaultResponseBuilder.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeader(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTrailingHeader(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTrailingHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <inheritdoc />
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ProxyAndRecordSettings">
            <summary>
            The WebProxy settings.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(WireMock.Settings.ProxyAndRecordSettings)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.ResponseMessage">
            <summary>
            The ResponseMessage.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.Headers">
            <inheritdoc />
        </member>
        <member name="P:WireMock.ResponseMessage.TrailingHeaders">
            <inheritdoc />
        </member>
        <member name="P:WireMock.ResponseMessage.StatusCode">
            <inheritdoc cref="P:WireMock.IResponseMessage.StatusCode" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyOriginal">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyOriginal" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyDestination">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyDestination" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyData">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyData" />
        </member>
        <member name="P:WireMock.ResponseMessage.FaultType">
            <inheritdoc cref="P:WireMock.IResponseMessage.FaultType" />
        </member>
        <member name="P:WireMock.ResponseMessage.FaultPercentage">
            <inheritdoc cref="P:WireMock.IResponseMessage.FaultPercentage" />
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseMessage.AddTrailingHeader(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.ResponseMessage.AddTrailingHeader(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:WireMock.ResponseProviders.IResponseProvider">
            <summary>
            The Response Provider interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseProviders.IResponseProvider.ProvideResponseAsync(WireMock.IMapping,WireMock.IRequestMessage,WireMock.Settings.WireMockServerSettings)">
            <summary>
            The provide response.
            </summary>
            <param name="mapping">The used mapping.</param>
            <param name="requestMessage">The request.</param>
            <param name="settings">The WireMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/> including a new (optional) <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="T:WireMock.ScenarioState">
            <summary>
            The ScenarioState
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Name">
            <summary>
            Gets or sets the Name (from the Scenario).
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.NextState">
            <summary>
            Gets or sets the NextState.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Started">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.ScenarioState"/> is started.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Finished">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.ScenarioState"/> is finished.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Counter">
            <summary>
            Gets or sets the state counter.
            </summary>
        </member>
        <member name="T:WireMock.Serialization.MappingConverterSettings">
            <summary>
            MappingConverterSettings
            </summary>
        </member>
        <member name="P:WireMock.Serialization.MappingConverterSettings.ConverterType">
             <summary>
             Use 'Server' or 'Builder'.
            
             Default is Server
             </summary>
        </member>
        <member name="P:WireMock.Serialization.MappingConverterSettings.AddStart">
             <summary>
             Add "var server = WireMockServer.Start();"
             or
             Add "var builder = new MappingBuilder();"
            
             Default it's false.
             </summary>
        </member>
        <member name="T:WireMock.Serialization.MappingFileNameSanitizer">
            <summary>
            Creates sanitized file names for mappings
            </summary>
        </member>
        <member name="M:WireMock.Serialization.MappingFileNameSanitizer.BuildSanitizedFileName(WireMock.IMapping)">
            <summary>
            Creates sanitized file names for mappings
            </summary>
        </member>
        <member name="M:WireMock.Serialization.PactMapper.TryDeserializeJsonStringAsObject(System.String)">
            <summary>
            In case it's a string, try to deserialize into object, else just return the string
            </summary>
        </member>
        <member name="T:WireMock.Server.IRespondWithAProvider">
            <summary>
            IRespondWithAProvider
            </summary>
        </member>
        <member name="P:WireMock.Server.IRespondWithAProvider.Guid">
            <summary>
            Gets the unique identifier for this mapping.
            </summary>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.Guid)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithTimeSettings(WireMock.Models.ITimeSettings)">
            <summary>
            Define the TimeSettings for this mapping.
            </summary>
            <param name="timeSettings">The TimeSettings.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithTitle(System.String)">
            <summary>
            Define a unique title for this mapping.
            </summary>
            <param name="title">The unique title.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithDescription(System.String)">
            <summary>
            Define a description for this mapping.
            </summary>
            <param name="description">The description.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithPath(System.String)">
            <summary>
            Define the full filepath for this mapping.
            </summary>
            <param name="path">The full filepath.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.String)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.AtPriority(System.Int32)">
            <summary>
            Define the priority for this mapping.
            </summary>
            <param name="priority">The priority. (A lower value means a higher priority.)</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.RespondWith(WireMock.ResponseProviders.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.InScenario(System.String)">
            <summary>
            Sets the the scenario.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.InScenario(System.Int32)">
            <summary>
            Sets the the scenario with an integer value.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.String)">
            <summary>
            Execute this respond only in case the current state is equal to specified one.
            </summary>
            <param name="state">Any object which identifies the current state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.Int32)">
            <summary>
            Execute this respond only in case the current state is equal to specified one.
            </summary>
            <param name="state">Any object which identifies the current state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.String,System.Nullable{System.Int32})">
            <summary>
            Once this mapping is executed the state will be changed to specified one.
            </summary>
            <param name="state">Any object which identifies the new state</param>
            <param name="times">The number of times this match should be matched before the state will be changed to the specified one. Default value is 1.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Once this mapping is executed the state will be changed to specified one.
            </summary>
            <param name="state">Any object which identifies the new state</param>
            <param name="times">The number of times this match should be matched before the state will be changed to the specified one. Default value is 1.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(WireMock.Models.IWebhook[])">
            <summary>
            Add (multiple) Webhook(s) to call after the response has been generated.
            </summary>
            <param name="webhooks">The Webhooks</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhookFireAndForget(System.Boolean)">
            <summary>
            Support FireAndForget for any configured Webhooks
            </summary>
            <param name="useWebhooksFireAndForget"></param>
            <returns></returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.String,System.Boolean,WireMock.Types.TransformerType)">
            <summary>
            Add a Webhook to call after the response has been generated.
            </summary>
            <param name="url">The Webhook Url</param>
            <param name="method">The method to use. [optional]</param>
            <param name="headers">The Headers to send. [optional]</param>
            <param name="body">The body (as string) to send. [optional]</param>
            <param name="useTransformer">Use Transformer. [optional]</param>
            <param name="transformerType">The transformer type. [optional]</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Object,System.Boolean,WireMock.Types.TransformerType)">
            <summary>
            Add a Webhook to call after the response has been generated.
            </summary>
            <param name="url">The Webhook Url</param>
            <param name="method">The method to use. [optional]</param>
            <param name="headers">The Headers to send. [optional]</param>
            <param name="body">The body (as json) to send. [optional]</param>
            <param name="useTransformer">Use Transformer. [optional]</param>
            <param name="transformerType">The transformer type. [optional]</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithData(System.Object)">
            <summary>
            Data Object which can be used when WithTransformer is used.
            e.g. lookup an path in this object using
            <param name="data">The data dictionary object.</param>
            <example>
            lookup data "1"
            </example>
            </summary>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithProbability(System.Double)">
            <summary>
            Define the probability when this request should be matched. Value is between 0 and 1.
            </summary>
            <param name="probability">The probability when this request should be matched. Value is between 0 and 1.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithProtoDefinition(System.String)">
            <summary>
            Define a Grpc ProtoDefinition which is used for the request and the response.
            This can be a ProtoDefinition as a string, or an id when the ProtoDefinitions are defined at the WireMockServer.
            </summary>
            <param name="protoDefinitionOrId">The proto definition as text or as id.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGraphQLSchema(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Define a GraphQL Schema which is used for the request and the response.
            This can be a GraphQL Schema as a string, or an id when the GraphQL Schema are defined at the WireMockServer.
            </summary>
            <param name="graphQLSchemaOrId">The GraphQL Schema as text or as id.</param>
            <param name="customScalars">A dictionary defining the custom scalars used in this schema. [optional]</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="T:WireMock.Server.RespondWithAProvider">
            <summary>
            The respond with a provider.
            </summary>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.#ctor(WireMock.RegistrationCallback,WireMock.Matchers.Request.IRequestMatcher,WireMock.Settings.WireMockServerSettings,WireMock.Util.IGuidUtils,WireMock.Util.IDateTimeUtils,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Server.RespondWithAProvider"/> class.
            </summary>
            <param name="registrationCallback">The registration callback.</param>
            <param name="requestMatcher">The request matcher.</param>
            <param name="settings">The WireMockServerSettings.</param>
            <param name="guidUtils">GuidUtils to make unit testing possible.</param>
            <param name="dateTimeUtils">DateTimeUtils to make unit testing possible.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.RespondWith(WireMock.ResponseProviders.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithData(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithTitle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithDescription(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithPath(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithPath(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.AtPriority(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.InScenario(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.InScenario(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WhenStateIs(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WhenStateIs(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WillSetStateTo(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WillSetStateTo(System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithTimeSettings(WireMock.Models.ITimeSettings)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(WireMock.Models.IWebhook[])">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.String,System.Boolean,WireMock.Types.TransformerType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Object,System.Boolean,WireMock.Types.TransformerType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithProtoDefinition(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGraphQLSchema(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Server.WireMockServer">
            <summary>
            The fluent mock server.
            </summary>
            <summary>
            The fluent mock server.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.SaveStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SaveStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ReadStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WatchStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WatchStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticMappingAndAddOrUpdate(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WatchStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SavePact(System.String,System.String)">
            <summary>
            Save the mappings as a Pact Json file V2.
            </summary>
            <param name="folder">The folder to save the pact file.</param>
            <param name="filename">The filename for the .json file [optional].</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.SavePact(System.IO.Stream)">
            <summary>
            Save the mappings as a Pact Json file V2.
            </summary>
            <param name="stream">The (file) stream.</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithConsumer(System.String)">
            <summary>
            This stores details about the consumer of the interaction.
            </summary>
            <param name="consumer">the consumer</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithProvider(System.String)">
            <summary>
            This stores details about the provider of the interaction.
            </summary>
            <param name="provider">the provider</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.FileHead(WireMock.IRequestMessage)">
            <summary>
            Checks if file exists.
            Note: Response is returned with no body as a head request doesn't accept a body, only the status code.
            </summary>
            <param name="requestMessage">The request message.</param>
        </member>
        <member name="P:WireMock.Server.WireMockServer.IsStarted">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.IsStartedWithAdminInterface">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Ports">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Port">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Urls">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Url">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Consumer">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Provider">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Mappings">
            <summary>
            Gets the mappings.
            </summary>
        </member>
        <member name="P:WireMock.Server.WireMockServer.MappingModels">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.MappingModels" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Scenarios">
            <summary>
            Gets the scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.CreateClient(System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a <see cref="T:System.Net.Http.HttpClient"/> which can be used to call this instance.
            <param name="handlers">
            An ordered list of System.Net.Http.DelegatingHandler instances to be invoked
            as an System.Net.Http.HttpRequestMessage travels from the System.Net.Http.HttpClient
            to the network and an System.Net.Http.HttpResponseMessage travels from the network
            back to System.Net.Http.HttpClient. The handlers are invoked in a top-down fashion.
            That is, the first entry is invoked first for an outbound request message but
            last for an inbound response message.
            </param>
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.CreateClient(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a <see cref="T:System.Net.Http.HttpClient"/> which can be used to call this instance.
            <param name="handlers">
            <param name="innerHandler">The inner handler represents the destination of the HTTP message channel.</param>
            An ordered list of System.Net.Http.DelegatingHandler instances to be invoked
            as an System.Net.Http.HttpRequestMessage travels from the System.Net.Http.HttpClient
            to the network and an System.Net.Http.HttpResponseMessage travels from the network
            back to System.Net.Http.HttpClient. The handlers are invoked in a top-down fashion.
            That is, the first entry is invoked first for an outbound request message but
            last for an inbound response message.
            </param>
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.CreateClients(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create <see cref="T:System.Net.Http.HttpClient"/>s (one for each URL) which can be used to call this instance.
            <param name="innerHandler">The inner handler represents the destination of the HTTP message channel.</param>
            <param name="handlers">
            An ordered list of System.Net.Http.DelegatingHandler instances to be invoked
            as an System.Net.Http.HttpRequestMessage travels from the System.Net.Http.HttpClient
            to the network and an System.Net.Http.HttpResponseMessage travels from the network
            back to System.Net.Http.HttpClient. The handlers are invoked in a top-down fashion.
            That is, the first entry is invoked first for an outbound request message but
            last for an inbound response message.
            </param>
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(WireMock.Settings.WireMockServerSettings)">
            <summary>
            Starts this WireMockServer with the specified settings.
            </summary>
            <param name="settings">The WireMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(System.Action{WireMock.Settings.WireMockServerSettings})">
            <summary>
            Starts this WireMockServer with the specified settings.
            </summary>
            <param name="action">The action to configure the WireMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Start this WireMockServer.
            </summary>
            <param name="port">The port.</param>
            <param name="useSSL">The SSL support.</param>
            <param name="useHttp2">Use HTTP 2 (needed for Grpc).</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(System.String[])">
            <summary>
            Start this WireMockServer.
            </summary>
            <param name="urls">The urls to listen on.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterface(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Start this WireMockServer with the admin interface.
            </summary>
            <param name="port">The port.</param>
            <param name="useSSL">The SSL support.</param>
            <param name="useHttp2">Use HTTP 2 (needed for Grpc).</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterface(System.String[])">
            <summary>
            Start this WireMockServer with the admin interface.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterfaceAndReadStaticMappings(System.String[])">
            <summary>
            Start this WireMockServer with the admin interface and read static mappings.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.#ctor(WireMock.Settings.WireMockServerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Server.WireMockServer"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <exception cref="T:WireMock.Exceptions.WireMockException">
            Service start failed with error: {_httpServer.RunningException.Message}
            or
            Service start failed with error: {startTask.Exception.Message}
            </exception>
            <exception cref="T:System.TimeoutException">Service start timed out after {TimeSpan.FromMilliseconds(settings.StartTimeout)}</exception>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Stop">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.Stop" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddCatchAllMapping">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AddCatchAllMapping" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.Reset">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.Reset" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetMappings">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetMappings" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.DeleteMapping(System.Guid)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.DeleteMapping(System.Guid)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddGlobalProcessingDelay(System.TimeSpan)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AddGlobalProcessingDelay(System.TimeSpan)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AllowPartialMapping(System.Boolean)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AllowPartialMapping(System.Boolean)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetAzureADAuthentication(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetAzureADAuthentication(System.String,System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetBasicAuthentication(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetBasicAuthentication(System.String,System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.RemoveAuthentication">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.RemoveAuthentication" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetScenarios">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetScenarios" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetScenario(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithMapping(WireMock.Admin.Mappings.MappingModel[])">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WithMapping(WireMock.Admin.Mappings.MappingModel[])" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithMapping(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WithMapping(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.Given(WireMock.Matchers.Request.IRequestMatcher,System.Boolean)">
            <summary>
            The given.
            </summary>
            <param name="requestMatcher">The request matcher.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddProtoDefinition(System.String,System.String)">
            <summary>
            Add a Grpc ProtoDefinition at server-level.
            </summary>
            <param name="id">Unique identifier for the ProtoDefinition.</param>
            <param name="protoDefinition">The ProtoDefinition as text.</param>
            <returns><see cref="T:WireMock.Server.WireMockServer"/></returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddGraphQLSchema(System.String,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Add a GraphQL Schema at server-level.
            </summary>
            <param name="id">Unique identifier for the GraphQL Schema.</param>
            <param name="graphQLSchema">The GraphQL Schema as string or StringPattern.</param>
            <param name="customScalars">A dictionary defining the custom scalars used in this schema. [optional]</param>
            <returns><see cref="T:WireMock.Server.WireMockServer"/></returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.MappingToCSharpCode(System.Guid,WireMock.Types.MappingConverterType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.WireMockServer.MappingsToCSharpCode(WireMock.Types.MappingConverterType)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticWireMockOrgMappingAndAddOrUpdate(System.String)">
            <summary>
            Read WireMock.org mapping json file.
            </summary>
            <param name="path">The path to the WireMock.org mapping json file.</param>
        </member>
        <member name="E:WireMock.Server.WireMockServer.LogEntriesChanged">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Server.WireMockServer.LogEntries">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.LogEntries" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.FindLogEntries(WireMock.Matchers.Request.IRequestMatcher[])">
            <summary>
            The search log-entries based on matchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetLogEntries">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetLogEntries" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.DeleteLogEntry(System.Guid)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.DeleteLogEntry(System.Guid)" />
        </member>
        <member name="T:WireMock.Settings.HttpClientSettings">
            <summary>
            HttpClientSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.ClientX509Certificate2ThumbprintOrSubjectName">
            <summary>
            The clientCertificate thumbprint or subject name fragment to use.
            Example thumbprint : "D2DBF135A8D06ACCD0E1FAD9BFB28678DF7A9818". Example subject name: "www.google.com""
            </summary>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.WebProxySettings">
            <summary>
            Defines the WebProxySettings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.AllowAutoRedirect">
            <summary>
            Proxy requests should follow redirection (30x).
            </summary>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.Certificate">
            <summary>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to use.
            </summary>
        </member>
        <member name="T:WireMock.Settings.ProxyAndRecordSettings">
            <summary>
            ProxyAndRecordSettings
            </summary>
        </member>
        <member name="F:WireMock.Settings.ProxyAndRecordSettings.DefaultPrefixForSavedMappingFile">
            <summary>
            Default prefix value for saved mapping file
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.Url">
            <summary>
            The URL to proxy.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMapping">
            <summary>
            Save the mapping for each request/response to the internal Mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingToFile">
            <summary>
            Save the mapping for each request/response also to a file. (Note that SaveMapping must also be set to true.)
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingForStatusCodePattern">
             <summary>
             Only save request/response to the internal Mappings if the status code is included in this pattern. (Note that SaveMapping must also be set to true.)
             The pattern can contain a single value like "200", but also ranges like "2xx", "100,300,600" or "100-299,6xx" are supported.
            
             Deprecated : use SaveMappingSettings.
             </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingSettings">
            <summary>
            Additional SaveMappingSettings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ExcludedHeaders">
            <summary>
            Defines a list from headers which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ExcludedParams">
            <summary>
            Defines a list of params which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ExcludedCookies">
            <summary>
            Defines a list of cookies which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ReplaceSettings">
            <summary>
            Replace Settings
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.UseDefinedRequestMatchers">
             <summary>
             When SaveMapping is set to <c>true</c>, this setting can be used to control the behavior of the generated request matchers for the new mapping.
             - <c>false</c>, the default matchers will be used.
             - <c>true</c>, the defined mappings in the request wil be used for the new mapping.
            
             Default value is false.
             </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.AppendGuidToSavedMappingFile">
            <summary>
            Append an unique GUID to the filename from the saved mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.PrefixForSavedMappingFile">
            <summary>
            Set prefix for saved mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ProxyAll">
            <summary>
            Proxy all Api calls, irrespective of any condition
            </summary>
        </member>
        <member name="T:WireMock.Settings.ProxySaveMappingSetting`1">
            <summary>
            Represents settings for saving a proxy mapping with a non-nullable value and a specific match behaviour.
            </summary>
            <typeparam name="T">The non-nullable type of the value associated with the proxy save mapping setting.</typeparam>
        </member>
        <member name="P:WireMock.Settings.ProxySaveMappingSetting`1.MatchBehaviour">
            <summary>
            Gets the match behaviour for the proxy save mapping setting.
            </summary>
            <value>The match behaviour which determines how matches are evaluated.</value>
        </member>
        <member name="P:WireMock.Settings.ProxySaveMappingSetting`1.Value">
            <summary>
            Gets the non-nullable value associated with the proxy save mapping setting.
            </summary>
            <value>The value of type <typeparamref name="T"/>.</value>
        </member>
        <member name="M:WireMock.Settings.ProxySaveMappingSetting`1.#ctor(`0,WireMock.Matchers.MatchBehaviour)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Settings.ProxySaveMappingSetting`1"/> class with specified non-nullable value and match behaviour.
            </summary>
            <param name="value">The non-nullable value of type <typeparamref name="T"/>.</param>
            <param name="matchBehaviour">The match behaviour (optional, default is <c>MatchBehaviour.AcceptOnMatch</c>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:WireMock.Settings.ProxySaveMappingSetting`1.op_Implicit(`0)~WireMock.Settings.ProxySaveMappingSetting{`0}">
            <summary>
            Converts a non-nullable value of type <typeparamref name="T"/> to a <see cref="T:WireMock.Settings.ProxySaveMappingSetting`1"/> implicitly.
            </summary>
            <param name="value">The non-nullable value to convert.</param>
        </member>
        <member name="M:WireMock.Settings.ProxySaveMappingSetting`1.op_Implicit(WireMock.Settings.ProxySaveMappingSetting{`0})~`0">
            <summary>
            Converts a <see cref="T:WireMock.Settings.ProxySaveMappingSetting`1"/> to its underlying non-nullable value of type <typeparamref name="T"/> implicitly.
            </summary>
            <param name="instance">The <see cref="T:WireMock.Settings.ProxySaveMappingSetting`1"/> to convert.</param>
        </member>
        <member name="T:WireMock.Settings.ProxySaveMappingSettings">
            <summary>
            ProxySaveMappingSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxySaveMappingSettings.StatusCodePattern">
            <summary>
            Only save request/response to the internal Mappings if the status code is included in this pattern. (Note that SaveMapping must also be set to true.)
            The pattern can contain a single value like "200", but also ranges like "2xx", "100,300,600" or "100-299,6xx" are supported.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxySaveMappingSettings.HttpMethods">
            <summary>
            Only save these Http Methods. (Note that SaveMapping must also be set to true.)
            </summary>
        </member>
        <member name="T:WireMock.Settings.ProxyUrlReplaceSettings">
            <summary>
            Defines an old path param and a new path param to be replaced when proxying.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyUrlReplaceSettings.OldValue">
            <summary>
            The old path value to be replaced by the new path value
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyUrlReplaceSettings.NewValue">
            <summary>
            The new path value to replace the old value with
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyUrlReplaceSettings.IgnoreCase">
            <summary>
            Defines if the case should be ignore when replacing.
            </summary>
        </member>
        <member name="T:WireMock.Settings.WebhookSettings">
            <summary>
            WebhookSettings
            </summary>
        </member>
        <member name="T:WireMock.Settings.WebProxySettings">
            <summary>
            WebProxySettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.Address">
            <summary>
            A string instance that contains the address of the proxy server.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.UserName">
            <summary>
            The user name associated with the credentials.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.Password">
            <summary>
            The password for the user name associated with the credentials.
            </summary>
        </member>
        <member name="T:WireMock.Settings.WireMockCertificateSettings">
             <summary>
             If https is used, these settings can be used to configure the CertificateSettings in case a custom certificate instead the default .NET certificate should be used.
            
             X509StoreName and X509StoreLocation should be defined
             OR
             X509CertificateFilePath and X509CertificatePassword should be defined
             </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreName">
            <summary>
            X509 StoreName (AddressBook, AuthRoot, CertificateAuthority, My, Root, TrustedPeople or TrustedPublisher)
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreLocation">
            <summary>
            X509 StoreLocation (CurrentUser or LocalMachine)
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreThumbprintOrSubjectName">
            <summary>
            X509 Thumbprint or SubjectName (if not defined, the 'host' is used)
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509CertificateFilePath">
            <summary>
            X509Certificate FilePath
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509CertificatePassword">
            <summary>
            X509Certificate Password
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.IsDefined">
            <summary>
            X509StoreName and X509StoreLocation should be defined
            OR
            X509CertificateFilePath and X509CertificatePassword should be defined
            </summary>
        </member>
        <member name="T:WireMock.Settings.WireMockServerSettings">
            <summary>
            WireMockServerSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Port">
            <summary>
            Gets or sets the http port.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.UseSSL">
            <summary>
            Gets or sets the use SSL.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.HostingScheme">
            <summary>
            Defines on which scheme (http/https) to host. (This overrides the <c>UseSSL</c> value).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.UseHttp2">
            <summary>
            Gets or sets to use HTTP 2 (used for Grpc).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.StartAdminInterface">
            <summary>
            Gets or sets whether to start admin interface.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ReadStaticMappings">
            <summary>
            Gets or sets if the static mappings should be read at startup.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WatchStaticMappings">
            <summary>
            Watch the static mapping files + folder for changes when running.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WatchStaticMappingsInSubdirectories">
            <summary>
            A value indicating whether subdirectories within the static mappings path should be monitored.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ProxyAndRecordSettings">
            <summary>
            Gets or sets if the proxy and record settings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Urls">
            <summary>
            Gets or sets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.StartTimeout">
            <summary>
            StartTimeout
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowPartialMapping">
            <summary>
            Allow Partial Mapping (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminUsername">
            <summary>
            The username needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminPassword">
            <summary>
            The password needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminAzureADTenant">
            <summary>
            The AzureAD Tenant needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminAzureADAudience">
            <summary>
            The AzureAD Audience / Resource for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.RequestLogExpirationDuration">
            <summary>
            The RequestLog expiration in hours (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.MaxRequestLogCount">
            <summary>
            The MaxRequestLog count (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.PreWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) before the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.PostWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) after the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdditionalServiceRegistration">
            <summary>
            Action which is called with IServiceCollection when ASP.NET Core DI is being configured. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CorsPolicyOptions">
            <summary>
            Policies to use when using CORS. By default CORS is disabled. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Logger">
            <summary>
            The IWireMockLogger which logs Debug, Info, Warning or Error
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.FileSystemHandler">
            <summary>
            Handler to interact with the file system to read and write static mapping files.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.HandlebarsRegistrationCallback">
            <summary>
            Action which can be used to add additional Handlebars registrations. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowCSharpCodeMatcher">
            <summary>
            Allow the usage of CSharpCodeMatcher (default is not allowed).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowBodyForAllHttpMethods">
            <summary>
            Allow a Body for all HTTP Methods. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse">
            <summary>
            Allow only a HttpStatus Code in the response which is defined. (default set to <c>false</c>).
            - false : also null, 0, empty or invalid HttpStatus codes are allowed.
            - true  : only codes defined in <see cref="T:System.Net.HttpStatusCode"/> are allowed.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DisableJsonBodyParsing">
            <summary>
            Set to true to disable Json deserialization when processing requests. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DisableRequestBodyDecompressing">
            <summary>
            Disable support for GZip and Deflate request body decompression. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DisableDeserializeFormUrlEncoded">
            <summary>
            Set to true to disable FormUrlEncoded deserializing when processing requests. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.HandleRequestsSynchronously">
            <summary>
            Handle all requests synchronously. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CertificateSettings">
             <summary>
             If https is used, these settings can be used to configure the CertificateSettings in case a custom certificate instead the default .NET certificate should be used.
            
             X509StoreName and X509StoreLocation should be defined
             OR
             X509CertificateFilePath and X509CertificatePassword should be defined
             </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CustomCertificateDefined">
            <summary>
            Defines if custom CertificateSettings are defined
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ClientCertificateMode">
            <summary>
            Client certificate mode for the server
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AcceptAnyClientCertificate">
            <summary>
            Whether to accept any client certificate
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WebhookSettings">
            <summary>
            Defines the global IWebhookSettings to use.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.UseRegexExtended">
            <summary>
            Use the <see cref="T:WireMock.RegularExpressions.RegexExtended"/> instead of the default <see cref="T:System.Text.RegularExpressions.Regex"/> (default set to <c>true</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.SaveUnmatchedRequests">
            <summary>
            Save unmatched requests to a file using the <see cref="T:WireMock.Handlers.IFileSystemHandler"/> (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DoNotSaveDynamicResponseInLogEntry">
            <summary>
            Don't save the response-string in the LogEntry when WithBody(Func{IRequestMessage, string}) or WithBody(Func{IRequestMessage, Task{string}}) is used. (default set to <c>false</c>).
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.QueryParameterMultipleValueSupport">
             <summary>
             See <seealso cref="P:WireMock.Settings.WireMockServerSettings.QueryParameterMultipleValueSupport"/>.
            
             Default value = "All".
             </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CustomMatcherMappings">
            <summary>
            Custom matcher mappings for static mappings
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.JsonSerializerSettings">
            <summary>
            The <see cref="P:WireMock.Settings.WireMockServerSettings.JsonSerializerSettings"/> used when the a JSON response is generated.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Culture">
            <summary>
            The Culture to use.
            Currently used for:
            - Handlebars Transformer
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ProtoDefinitions">
            <summary>
            A list of Grpc ProtoDefinitions which can be used.
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.GraphQLSchemas">
            <summary>
            A list of GraphQL Schemas which can be used.
            </summary>
        </member>
        <member name="T:WireMock.Settings.WireMockServerSettingsParser">
            <summary>
            A static helper class to parse commandline arguments into WireMockServerSettings.
            </summary>
        </member>
        <member name="M:WireMock.Settings.WireMockServerSettingsParser.TryParseArguments(System.String[],System.Collections.IDictionary,WireMock.Settings.WireMockServerSettings@,WireMock.Logging.IWireMockLogger)">
            <summary>
            Parse commandline arguments into WireMockServerSettings.
            </summary>
            <param name="args">The commandline arguments</param>
            <param name="environment">The environment settings (optional)</param>
            <param name="logger">The logger (optional, can be null)</param>
            <param name="settings">The parsed settings</param>
        </member>
    </members>
</doc>
